# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
#
# --------------------( SYNOPSIS                           )--------------------
# This exlib aggregates Java Maven-specific logic for those Java exheres
# supporting Maven installation.
#
# This exlib conflicts with the "antefix" exlib. Given a Java exheres providing
# both "build.xml" and "pom.xml" files, it's generally better to use the former
# rather than latter: i.e., to have the exheres require the "antefix" exlib
# rather than this exlib. Ant "build.xml" are typically more readable than Maven
# "pom.xml" files, more amenable to change with command-line or
# "build.properties" file properties, more amenable to symbolically linked jar
# file dependencies, and less dependent on download of dependencies. Ant is,
# moreover, much easier to compile from source. It has no mandatory build- or
# runtime dependencies (aside from the JDK itself) unlike Maven, which has a
# sick multitude of buildtime dependencies. Maven is a fine build tool for
# deploying web applications; less so for deploying source-based applications.
#
# Given a Java exheres providing neither "build.xml" nor "pom.xml" files, it's
# again better to use the "antefix" exlib than this exlib. Why? "antefix"
# permits dynamic creation of fake "build.xml" files, which assists with
# cobbling together a build process for Java exheres shipping no build process.
#
# --------------------( SEE ALSO                           )--------------------
# * "Maven Lifecycle, Phase, and Goal Reference."
#   http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# ....................{ EXHERES                            }....................
# All Maven exheres are, by assumption, Java exheres. See the "antefix.exlib"
# header for commentary as to why this exlib requires "javafix".
require javafix
export_exlib_phases src_prepare src_compile src_test src_install

# ....................{ CONFIGURATION                      }....................
# Absolute or relative path under ${WORK} to the "pom.xml" for this exheres.
MAVEN_POM_XML="pom.xml"

# Maven parameters to be passed to all command-line Maven invocations. Example:
#     MAVEN_PARAMS=( -Dproject.classpath=/usr/share/elephantdog/ )
MAVEN_PARAMS=( )

# Maven tasks to be run on ${MAVEN_POM_XML} during the "src_configure" phase.
#
# Unlike Ant, this and all other Maven task arrays below have sensible defaults
# as listed in the "Maven Lifecycle..." reference, above. Maven exheres may, if
# they need, redefine these arrays; but that is typically unnecessary.
MAVEN_SRC_CONFIGURE_PARAMS=( initialize )

# Maven tasks to be run against ${MAVEN_POM_XML} during the "src_compile" phase.
MAVEN_SRC_COMPILE_PARAMS=( compile )

# Maven tasks to be run against ${MAVEN_POM_XML} during the "src_test" phase.
MAVEN_SRC_TEST_PARAMS=( test )

# Maven tasks to be run against ${MAVEN_POM_XML} during the "src_install" phase.
MAVEN_SRC_INSTALL_PARAMS=( package )

# ....................{ CONSTANTS                          }....................
if [[ -z "${M2_HOME}" ]]; then
    ewarn "\$M2_HOME is not set; it defaults to \"/usr/share/maven\"."
    M2_HOME="/usr/share/maven"
fi

# Absolute path to the "mvn" binary. ${M2_HOME} is an environment variable set
# by "/etc/env.d/*maven", itself installed by the Maven exheres. It usually
# points to "/usr/share/maven/".
MAVEN="${M2_HOME}/bin/mvn"

# ....................{ EXHERES                            }....................
DEPENDENCIES+="
    build:
        dev-java/apache-maven
"

# ....................{ PHASES                             }....................
maven_src_configure() {
    javafix_src_configure

    if [[ -n "${MAVEN_SRC_CONFIGURE_PARAMS[@]}" ]]; then
        echo ">>> Configuring source files"
        emaven "${MAVEN_BUILD_XML}" "${MAVEN_PARAMS[@]}" "${MAVEN_SRC_CONFIGURE_PARAMS[@]}"
    fi
}

maven_src_compile() {
    javafix_src_compile

    if [[ -n "${MAVEN_SRC_COMPILE_PARAMS[@]}" ]]; then
        echo ">>> Compiling source files"
        emaven "${MAVEN_BUILD_XML}" "${MAVEN_PARAMS[@]}" "${MAVEN_SRC_COMPILE_PARAMS[@]}"
    fi
}

maven_src_test() {
    javafix_src_test

    if [[ -n "${MAVEN_SRC_TEST_PARAMS[@]}" ]]; then
        echo ">>> Testing compiled files"
        emaven "${MAVEN_BUILD_XML}" "${MAVEN_PARAMS[@]}" "${MAVEN_SRC_TEST_PARAMS[@]}"
    fi
}

maven_src_install() {
    # Invoke Maven, which probably generates jar files, prior to calling the
    # parent "src_install" function, which actually install these files.
    if [[ -n "${MAVEN_SRC_INSTALL_PARAMS[@]}" ]]; then
        echo ">>> Packaging jar files"
        emaven "${MAVEN_BUILD_XML}" "${MAVEN_PARAMS[@]}" "${MAVEN_SRC_INSTALL_PARAMS[@]}"
    fi

    javafix_src_install
}

# ....................{ EMAVEN                             }....................
# void emaven(char *pom_xml_filename, char *param1, char *param2, ...)
#
# Call "maven" with the passed absolute or relative path to a "pom.xml" file and
# zero or more command-line parameters to be passed to this "pom.xml" file.
# These parameters must be either: {a} Maven properties of the form
# "-Dkey=value" (e.g., "-Dmaven.test.skip=false") or {b} Maven tasks of the form
# "task" (e.g., "install").
emaven() {
    illegal_in_global_scope
    [[ ${#} -ge 1 ]] || die_unless_nonfatal "at least one argument needed"

    local MAVEN_POM_XML="${1}"
    shift

    # Always pass the "--offline" option when invoking Maven. As the name
    # suggests, this prevents Maven from downloading dependencies or updates.
    edo "${MAVEN}" --file "${MAVEN_POM_XML}" --offline "${@}"
}

