# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'sat4j-core-2.1.1.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation
#
# --------------------( SYNOPSIS                           )--------------------
# This exlib generalizes the SAT4J install process. SAT4J distributes itself as
# several independent source tarballs, each providing independent functionality.
# The build process for each tarball is the same, however. Thus, this exlib.

# ....................{ EXHERES                            }....................
# Example require statement for "sat4j-core-2.1.1.exheres-0":
#
#     # SAT4J 2.1.1 was completed on August 26th, 2009 and requires
#     # "build-2.4.xml" for building.
#     require sat4j [ build_date=20090826 build_version=2.4 ]
require antefix java-manifest

# SAT4J bundles its source as a jar file within its archive. Do not delete it!
disable_jar_file_cleaning

export_exlib_phases src_unpack src_prepare src_install

# Get the suffix for this subcomponent: e.g., for "sat4j-core" this is "core".
# Set this early, so that we can reference it via "myexparam" defaults.
SAT4J_PN=${PN#sat4j-}

# SAT4J tarballs are named according to completion date rather than program
# version. These dates are formatted "${YEAR}${MONTH}${DAY}".
#
# Find the date string corresponding to any SAT4J version by browsing:
# http://download.forge.objectweb.org/sat4j/
myexparam build_date=

# SAT4J tarballs are built according to a common "build-v${build_version}" Ant
# build file such that tarballs corresponding to the same version of SAT4J are
# built according to the same version of this build file. Thus, both
# "sat4j-core-2.1.1.exheres" and "sat4j-pb-2.1.1.exheres" are built against
# "build-v2.4.xml".
#
# Find the build version corresponding to any SAT4J version by browsing:
# http://download.forge.objectweb.org/sat4j/
myexparam build_version=

# Most SAT4J subcomponents are built by running a single Ant task corresponding
# to the same name as the subcomponent: e.g., the "core" Ant task for the
# "sat4j-core" exheres. Some, however, do not and must be explicitly specified.
myexparam build_task="${SAT4J_PN}"

# Most SAT4J subcomponents expect input jar files in "${SAT4J_PN}/lib": e.g.,
# "maxsat/lib" for the "sat4j-maxsat" exheres. Some, however, do not and must be
# explicitly specified.
myexparam lib_dir="${SAT4J_PN}/lib"

# Copy the above parameters to global variables.
exparam -v SAT4J_BUILD_DATE    build_date
exparam -v SAT4J_BUILD_VERSION build_version
exparam -v SAT4J_BUILD_TASK    build_task
exparam -v SAT4J_LIB_DIR       lib_dir

# ....................{ FILENAMES                          }....................
# Uppercase this suffix's first letter: e.g., for "sat4j-core" this is "Core".
SAT4J_PN_CASED=${SAT4J_PN^}

# Construct the basename for both input and output jar files for this
# subcomponent, sans type: e.g., for "sat4j-core" this is "org.sat4j.core".
# Simply append file type to this name to get the full basename. (In most cases,
# but not all, the file type is ".jar".)
SAT4J_JAR_PN="org.sat4j.${SAT4J_PN}"
SAT4J_JAR_FILENAME="${SAT4J_JAR_PN}.jar"

# Absolute path to the work directory. SAT4J tarballs extract into the current
# directory, so... this is it.
WORK="${WORKBASE}"

# The build file expects a directory tree resembling:
#
# * "${SAT4J_PN}/src/", having source files.
# * "${SAT4J_PN}/lib/", having input jar files (i.e., external dependencies).
# * "${SAT4J_PN}/META-INF/", having manifest files.
#
# Non-core subcomponents also expect core directories, despite ignoring the
# contents of these directories, resembling:
#
# * "core/src/", having source files for SAT4J Core.
# * "core/lib/", having input jar files for SAT4J Core.
#
# So be it, scoundrel. (Note that ${SAT4J_LIB_DIR} is set above.)
SAT4J_SRC_DIR_CORE="core/src"
SAT4J_LIB_DIR_CORE="core/lib"
SAT4J_SRC_DIR="${SAT4J_PN}/src"
SAT4J_MANIFEST_DIR="${SAT4J_PN}/META-INF"
SAT4J_MANIFEST_FILE="${SAT4J_MANIFEST_DIR}/MANIFEST.MF"

# ....................{ EXHERES                            }....................
BUGS_TO="leycec@gmail.com"

SUMMARY="${SAT4J_PN_CASED} component for SAT4J, a Java reasoning engine"
DESCRIPTION="
SAT4J is a Java reasoning engine for solving SATisfiability (SAT) problems.
Compared to the OpenSAT project, the SAT4J library targets first users of SAT
\"black boxes\" willing to embed SAT technologies into their application without
worrying about the details. Since we use the library for our own research, it is
also possible for SAT researchers to use it as a basis for their work. 
"

HOMEPAGE="http://www.sat4j.org/"
DOWNLOADS="
    http://download.forge.objectweb.org/sat4j/${PN}-v${SAT4J_BUILD_DATE}.zip
    http://download.forge.objectweb.org/sat4j/build-${SAT4J_BUILD_VERSION}.xml -> build.xml"
UPSTREAM_DOCUMENTATION="${HOMEPAGE}/maven$(ever range 1-2 ${PV}) [[ lang = en ]]"

SLOT="0"
LICENCES="|| ( EPL-1.0 LGPL-3 )"
DEPENDENCIES+="
    build:
        app-arch/unzip
"

# Non-core subcomponents depend upon core of the exact same version, and must
# symlink that external jar file for core into their "lib/" directory.
if [[ "${SAT4J_PN}" != "core" ]]; then
    JAVA_SRC_LIBRARY_DIR="${SAT4J_LIB_DIR}"
    JAVA_SRC_PREPARE_JARS=( $(which_installed_jar_file "sat4j-core") )

    DEPENDENCIES+="
    build+run:
        dev-java/sat4j-core[=${PV}]
"
fi

# The common "build-${BUILD_VERSION}.xml" file provides one task for each
# subcomponent that, when called, compiles the subcomponent and jars it into
# the "dist/CUSTOM/" directory. ("CUSTOM" refers to the release name; in our
# case, a customized build.)
#
# Thus, there's no prepare or jar tasks. One shot for glory, baby.
ANT_SRC_COMPILE_PARAMS=( "${SAT4J_BUILD_TASK}" )

DEFAULT_SRC_INSTALL_EXTRA_DOCS=( "overview.html" )

# Each SAT4J tarball comes bundled with two jar files: one ending in "-src.jar"
# and the other in ".jar". The former has .java files; the latter has .class
# files. Unpack the former and delete both.
sat4j_src_unpack() {
    antefix_src_unpack

    echo ">>> Unpacking sources jar file"
    SAT4J_JAR_FILE_SOURCES="${SAT4J_JAR_PN}-src.jar"
    SAT4J_JAR_FILE_CLASSES="${SAT4J_JAR_PN}.jar"
    edo mkdir -p "${SAT4J_SRC_DIR}" "${SAT4J_LIB_DIR}" "${SAT4J_MANIFEST_DIR}" \
                 "${SAT4J_SRC_DIR_CORE}" "${SAT4J_LIB_DIR_CORE}"
    edo unzip -q "${SAT4J_JAR_FILE_SOURCES}" -d "${SAT4J_SRC_DIR}"
    edo rm       "${SAT4J_JAR_FILE_SOURCES}" "${SAT4J_JAR_FILENAME}"

    # A few SAT4J jar files bundle a version file, which the SAT4J launcher and
    # presumably other files read to version themselves. The version file
    # provided by their .class jar file is valid; however, the version file
    # provided by their .java jar file has a placeholder token resembling
    # "9.9.9.token". In any case, since not all SAT4J jar files bundle a version
    # file, we assume none do and manually reconstruct it for all builds. It has
    # format "${PV}.${SAT4J_BUILD_VERSION}": e.g., "2.1.1.v20090826" for SAT4J
    # 2.1.1.
    #
    # The build file requires this version file to reside in the hardcoded path
    # "${SAT4J_SRC_DIR_CORE}" rather than the usual "${SAT4J_SRC_DIR}/". Eh?
    echo ">>> Unpacking classes jar file version"
    edo echo "${PV}.${SAT4J_BUILD_VERSION}" > "${SAT4J_SRC_DIR_CORE}/sat4j.version"

    # The sources jar file unpacked above bundles a manifest file into the
    # "${SAT4J_PN}/src/META-INF/" directory. The build file expects it in the
    # "${SAT4J_PN}/META-INF/" directory, however. Move it. /me sighs
    echo ">>> Structuring directory tree"
    edo mv "${SAT4J_SRC_DIR}/META-INF/MANIFEST.MF" "${SAT4J_MANIFEST_FILE}"
    edo cp "${FETCHEDDIR}/build.xml" .
}

sat4j_src_prepare() {
    antefix_src_prepare

    # Prevent Ant from getting CVS source as performed by the "getsource" task;
    # prevent Ant tasks from depending on the "core" task, as this exlib already
    # ensures "sat4j-core.jar" is built and symlinked into ${WORK} for non-core
    # SAT4J exheres (e.g., "sat4j-pb").
    #
    # Do this prior to calling the parent "src_prepare", which invokes Ant.
    echo ">>> Patching ${ANT_BUILD_XML}"
    edo sed -e 's: depends="core"::' -e 's:,getsource::' -i "${ANT_BUILD_XML}"

    # These values retrieved from "plugin.properties" bundled with this jar file.
    # Thor, I pray they stay in sync.
    echo ">>> Patching jar file manifest"
    local BUNDLE_NAME="SAT4J ${SAT4J_PN_CASED}"
    local PROVIDER_NAME="CRIL CNRS UMR 8188 - Universite d'Artois"
    rectify_jar_manifest "${SAT4J_MANIFEST_FILE}"
}

sat4j_src_install() {
    antefix_src_install

    echo ">>> Installing jar file"
    local SAT4J_INSTALLED_JAR_DIR=$( which_installed_jar_dir_for_this_exheres)
    local SAT4J_INSTALLED_JAR_FILE=$(which_installed_jar_dir_for_this_exheres)
    install_jar_as "dist/CUSTOM/${SAT4J_JAR_FILENAME}" \
          "${SAT4J_INSTALLED_JAR_FILE}"

    # Other exheres often expect SAT4J jar filenames to be named according the
    # reverse domain name.
    dosym "${SAT4J_INSTALLED_JAR_FILE}" \
          "${SAT4J_INSTALLED_JAR_DIR}/${SAT4J_JAR_FILENAME}"
}

