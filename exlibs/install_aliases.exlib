# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
#
# --------------------( SYNOPSIS                           )--------------------
# This exlib aliases installer function names to more descriptive alternatives.
# "Installer functions" are those typically called by the "src_install"
# function for an exheres: e.g., "insinto", "insopts", "doins", "hereins". Some
# functions are defined in "/usr/libexec/paludis/install_functions.bash" and the
# remainder via scripts in "/usr/libexec/paludis/util/". Installer functions
# were inherited from Gentoo functions of the same name. Sadly, due in part to
# this inheritance, these names are often undescriptive.
#
# This exlib aliases such names so as to improve exheres readability. It
# provides nothing except name aliases. (Perhaps that is enough!)

# ....................{ LINKS                              }....................
# void ln_hard(char *filename1, char *filename2)
#
# Hardlink the existing absolute "filename1" to a new absolute "filename2". This
# is functionally equivalent to:
#
#   ln -f "$filename1" "$filename2"
alias ln_hard="dohard"

# void ln_soft(char *filename1, char *filename2)
#
# Softlink the existing absolute "filename1" to a new absolute "filename2". This
# is functionally equivalent to:
#
#   ln -sf "$filename1" "$filename2"
alias ln_soft="dosym"

# ....................{ DIRECTORIES                        }....................
# void set_mkdir_options(char *options)
#
# Set options to be passed to the "install" binary when installing directories
# via the below functions.
#
# This defaults to "-m0755".
alias set_mkdir_options="diropts"

# void mkdir_parents(char *pathname)
#
# Make an absolute directory and all parent directories of that directory, as
# need be. This is functionally equivalent to:
#
#   mkdir --parents "$pathname"
alias mkdir_parents="dodir"

# void mkdir_with_keep_file(char *pathname)
#
# Make an absolute directory and all parent directories of that directory, as
# need be, and having an empty ".keep" file as its only contents.
alias mkdir_parents_with_keep_file="keepdir"

# ....................{ ROOT                               }....................
# void set_top_dir(char *pathname)
#
# Set the absolute top-level install directory. All functions in this section
# operate on this directory until the next invocation of this function.
#
# This directory defaults to "/usr".
alias set_top_dir="into"

# ....................{ DOCUMENTS                          }....................
# void set_document_dir(char *pathname)
#
# Set the "/usr/share/doc/"-relative documents directory. The
# "*_usr_share_doc_dir" family of functions, below, operate on this directory
# until the next invocation of this function.
#
# Note this is not an absolute pathname, but rather the name of a directory
# immediately under "/usr/share/doc/". If this directory does not already exist,
# this function also makes the directory.
alias set_document_dir="docinto"

# void install_documents(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the above
# directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "/usr/share/doc/$document_dir/"
alias install_documents="dodoc"

# void install_html_documents(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the above
# directory. This has no functional equivalent as it dynamically determines the
# proper document directory to which each HTML file should be installed.
alias install_html_documents="dohtml"

# ....................{ MANPAGES                           }....................
# There is no "set_manpage_dir". Upstream packages already specify the package-
# specific manpage directories to which manpages should be installed implicitly,
# according to the suffix for each such manpage.

# void install_manpages(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the above
# directory. This has no functional equivalent as it dynamically determines the
# proper manpage directory to which each manpage should be installed.
alias install_manpages="doman"

# void install_manpage_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the above directory.
alias install_manpage_as="newman"

# ....................{ INFO FILES                         }....................
# There is no "set_info_file_dir". Info files are always installed to
# "/usr/share/info/".

# void install_info_files(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the above
# directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "/usr/share/info/"
alias install_info_files="doinfo"

# ....................{ LOCALES                            }....................
# There is no "set_locale_dir". Upstream packages already specify the package-
# specific manpage directories to which locales should be installed implicitly,
# according to the prefix for each such locale.

# void install_locales(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the above
# directory. This has no functional equivalent as it dynamically determines the
# proper locale directory to which each locale should be installed.
alias install_locales="domo"

# ....................{ LIBRARIES                          }....................
# There is no "set_library_dir". Upstream packages already specify the package-
# specific library directory to which all libraries should be installed.
#
# Exheres must not overwrite this directory, and thus have no function to do so.

# void set_library_options(char *options)
#
# Set options to be passed to the "install" binary when installing files and
# directories to the library directory for the current exheres.
#
# This defaults to "-m0755".
alias set_library_options="libopts"

# void install_libraries(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# above directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "$library_dir/"
alias install_libraries="dolib"

# void install_a_libraries(char *filename1, char *filename2, ...)
#
# Copy "lib.a"-format absolute filenames to filenames having the same basename
# under the above directory.
alias install_a_libraries="dolib.a"

# void install_so_libraries(char *filename1, char *filename2, ...)
#
# Copy "lib.so"-format absolute filenames to filenames having the same basename
# under the above directory.
alias install_so_libraries="dolib.so"

# void install_library_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the above directory.
# This is functionally equivalent to:
#
#   cp "$filename1" "$library_dir/$filename2"
alias install_library_as="newlib"

# void install_a_library_as(char *filename1, char *filename2)
#
# Copy "lib.a"-format absolute "$filename1" to relative "$filename2" under the
# above directory.
alias install_a_library_as="newlib.a"

# void install_so_library_as(char *filename1, char *filename2)
#
# Copy "lib.so"-format absolute "$filename1" to relative "$filename2" under the
# above directory.
alias install_so_library_as="newlib.so"

# ....................{ BINARIES                           }....................
# void install_binary_as(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# "bin/" directory of the top directory. By default, this is "/usr/bin/". This
# is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "$top_dir/bin/"
alias install_binaries="dobin"

# void install_binary_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the "bin/" directory
# of the top directory. By default, this is "/usr/bin/". This is functionally
# equivalent to:
#
#   cp "$filename1" "$top_dir/bin/$filename2"
alias install_binary_as="newbin"

# void cat_binary(char *filename, char *file_contents)
#
# Concatenate the string "file_contents" into a new relative "filename" under
# the top directory. This is functionally equivalent to:
#
#   cat > "$top_dir/bin/$filename" <<EOF
#   $file_contents
#   EOF
alias cat_binary="herebin"

# ....................{ BINARIES =superuser                }....................
# void install_superuser_binaries(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# "sbin/" directory of the top directory. By default, this is "/usr/sbin/".
# This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "$top_dir/sbin/"
alias install_superuser_binaries="dosbin"

# void install_superuser_binary_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the "sbin/"
# directory of the top directory. By default, this is "/usr/sbin/". This is
# functionally equivalent to:
#
#   cp "$filename1" "$top_dir/sbin/$filename2"
alias install_superuser_binary_as="newsbin"

# void cat_superuser_binary(char *filename, char *file_contents)
#
# Concatenate the string "file_contents" into a new relative "filename" under
# the top directory. This is functionally equivalent to:
#
#   cat > "$top_dir/sbin/$filename" <<EOF
#   $file_contents
#   EOF
alias cat_superuser_binary="heresbin"

# ....................{ EXECUTABLES                        }....................
# void set_executable_dir(char *pathname)
#
# Set the executable directory. The "*_executable_dir" family of functions, below,
# operate on this directory until the next call to this function.
alias set_executable_dir="exeinto"

# void set_executable_options(char *options)
#
# Set options to be passed to the "install" executable when installing files and
# directories to the above directory.
#
# This defaults to "-m0755" (i.e., the execute bit is set).
alias set_executable_options="exeopts"

# void install_executables(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# above directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "$executable_dir/"
alias install_executables="doexe"

# void install_executable_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the above
# directory. This is functionally equivalent to:
#
#   cp "$filename1" "$executable_dir/$filename2"
alias install_executable_as="newexe"

# void cat_executable(char *filename, char *file_contents)
#
# Concatenate the string "file_contents" into a new relative "filename" under
# the above directory. This is functionally equivalent to:
#
#   cat > "$executable_dir/$filename" <<EOF
#   $file_contents
#   EOF
alias cat_executable="hereins"

# ....................{ NON-EXECUTABLES                    }....................
# void set_nonexecutable_dir(char *pathname)
#
# Set the nonexecutable directory. The "*_nonexecutable_dir" family of functions, below,
# operate on this directory until the next call to this function.
alias set_nonexecutable_dir="insinto"

# void set_nonexecutable_options(char *options)
#
# Set options to be passed to the "nonexecutable" binary when nonexecutableing files and
# directories to the above directory.
#
# This defaults to "-m0644" (i.e., the execute bit is not set).
alias set_nonexecutable_options="insopts"

# void install_nonexecutables(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# above directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "$nonexecutable_dir/"
alias install_nonexecutables="doins"

# void install_nonexecutable_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the above
# directory. This is functionally equivalent to:
#
#   cp "$filename1" "$nonexecutable_dir/$filename2"
alias install_nonexecutable_as="newins"

# void cat_nonexecutable(char *filename, char *file_contents)
#
# Concatenate the string "file_contents" into a new relative "filename" under
# the above directory. This is functionally equivalent to:
#
#   cat > "$nonexecutable_dir/$filename" <<EOF
#   $file_contents
#   EOF
alias cat_nonexecutable="hereins"

# ....................{ SYSTEM FILES                       }....................
# void install_etc_confd_files(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# "/etc/conf.d/" directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "/etc/conf.d/"
alias install_etc_confd_files="doconfd"

# void install_etc_envd_files(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# "/etc/env.d/" directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "/etc/env.d/"
alias install_to_etc_envd="doenvd"

# void install_etc_initd_files(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to filenames having the same basename under the
# "/etc/conf.d/" directory. This is functionally equivalent to:
#
#   cp "$filename1" "$filename2" ... "/etc/init.d/"
alias install_etc_initd_files="doinitd"

# void install_etc_confd_file_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the
# "/etc/conf.d/" directory. This is functionally equivalent to:
#
#   cp "$filename1" "/etc/conf.d/$filename2"
alias install_etc_confd_file_as="newconfd"

# void install_etc_envd_file_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the
# "/etc/env.d/" directory. This is functionally equivalent to:
#
#   cp "$filename1" "/etc/env.d/$filename2"
alias install_etc_envd_file_as="newenvd"

# void install_etc_initd_file_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the
# "/etc/init.d/" directory. This is functionally equivalent to:
#
#   cp "$filename1" "/etc/init.d/$filename2"
alias install_etc_initd_file_as="newinitd"

# void cat_etc_confd_file(char *filename, char *file_contents)
#
# Concatenate the string "file_contents" into a new relative "filename" under
# the "/etc/conf.d/" directory. This is functionally equivalent to:
#
#   cat > "/etc/conf.d/$filename" <<EOF
#   $file_contents
#   EOF
alias cat_etc_confd_file="hereconfd"

# void cat_etc_envd_file(char *filename, char *file_contents)
#
# Concatenate the string "file_contents" into a new relative "filename" under
# the "/etc/env.d/" directory. This is functionally equivalent to:
#
#   cat > "/etc/env.d/$filename" <<EOF
#   $file_contents
#   EOF
alias cat_etc_envd_file="hereenvd"

# void cat_etc_initd_file(char *filename, char *file_contents)
#
# Concatenate the string "file_contents" into a new relative "filename" under
# the "/etc/init.d/" directory. This is functionally equivalent to:
#
#   cat > "/etc/init.d/$filename" <<EOF
#   $file_contents
#   EOF
alias cat_etc_initd_file="hereinitd"

