# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
#
# --------------------( SYNOPSIS                           )--------------------
# This exlib improves "ant.exlib" with handling for command-line properties,
# external dependencies, and jar and javadoc installation. These improvements
# should be backported into "ant.exlib" where deemed appropriate.
#
# This exlib requires "ant.exlib", and is thus backwards compatible with other
# exlibs and exheres requiring "ant.exlib".
#
# --------------------( ETYMOLOGY                          )--------------------
# Technically, an antefix is "an ornament of the cymatium of a classic cornice,
# sometimes pierced for the escape of water." In reality, I'm not sure I know
# what a cymatium is. Or a cornice.

# ....................{ EXHERES                            }....................
require ant java
export_exlib_phases src_prepare src_compile src_test src_install

# If true, recursively delete all jar files from "${WORK}" immediately after
# unpacking source archives. Such jar files are bundled with source archives by
# their distributors so as to reduce dependency headaches. For us, bundled jar
# files only aggravate headaches. Cut them away.
#
# If false, do not. By default, we do.
myexparam -b clean_jar_files=true

# ....................{ GLOBALS                            }....................
# Ant parameters to be passed to all command-line invocations of Ant. Example:
#     ANT_PARAMS=( -Dproject.classpath=/usr/share/zebrapig/ )
ANT_PARAMS=( )

# Absolute or relative path under "${WORK}" into which external jar files will
# be symlinked. Though this path is typically "lib" for most exheres, you must
# still specify this global to have symlinking performed for you. Example:
#     ANT_SRC_PREPARE_SYMLINK_DIR="lib"
ANT_SRC_PREPARE_SYMLINK_DIR=""

# List of absolute paths to or relative names of external jar files to be
# symlinked into "${ANT_SRC_SYMLINK_DIR}". These external jar files should
# generally be buildtime dependencies of this exheres. Example mixing both
# absolute paths to and relative names of external jar files:
#     ANT_SRC_PREPARE_SYMLINK_JARS=( jarjar qdox "/usr/share/asm/asm.jar" )
#
# If filenames are not known until install time, leave this array blank and
# call "symlink_jars" within your "${PN}_src_prepare" function.
ANT_SRC_PREPARE_SYMLINK_JARS=( )

# Absolute path to which this exheres' output jar files will be installed.
# (Avoid changing this unless you absolutely must.)
ANT_SRC_INSTALL_JARS_DIR="/usr/share/${PN}"

# Array of absolute paths to this exheres' output jar files to be installed
# under "${ANT_SRC_INSTALL_JARS_DIR}". Versions are automatically removed from
# filenames on your behalf. (Yippee!) Example:
#     ANT_SRC_PREPARE_INSTALL_JARS=( "${WORK}/dist/${PNV}.jar" )
#
# If filenames are not known until install time, leave this array blank and
# call "install_jars" within your "${PN}_src_install" function.
ANT_SRC_INSTALL_JARS=( )

# Sed pattern matching the version suffix commonly appended to jar filenames.
# The pattern matches conventional versions (e.g., "hamcrest-1.2.jar") and
# unconventional revisioned versions (e.g., "jarjar-1.0rc8.jar"). Note that, due
# to simplicity, the pattern may ocassionally match more than you want!
ANT_JAR_VERSION_PATTERN='-[0-9].*\.jar'

# ....................{ PHASES                             }....................
antefix_src_prepare() {
    # The "ant_src_prepare" function recursively destroys the contents of
    # all paths in "${ANT_BUNDLED_LIBSDIR}". Obviously, we must not destroy the
    # "${WORK}" path. However, some Java libraries (e.g., Hamcrest) come with
    # jar files pre-bundled in the "${WORK}" path. We thus homebrew this boolean
    # to recursively remove jar files rather than all files and paths.
    #
    # Disable this by requiring this exlib with:
    #     require antefix [ clean_jar_files=false ]
    if exparam -b clean_jar_files; then
        einfo "Removing jar files..."
        edo rm -f "${WORK}"/**/*.jar
    fi

    [[ -n "${DEFAULT_SRC_PREPARE_PATCHES}" ]] && einfo "Patching files..."
    default  # calls the original "src_prepare" function

    if [[ $(eclectic java-jre show) = gcj* ]]; then
        ewarn "Your currently selected Java compiler is \"gcj\". While, technically,"
        ewarn "this compiler works, it also introduces sydbox access violations by"
        ewarn "attempting to open spurious DNS requests. Until this can be"
        ewarn "corrected, please consider installing and enabling the \"icedtea6\""
        ewarn "compiler instead with:"
        ewarn
        ewarn "  sudo paludis -i icedtea6 && eclectic java-jdk set icedtea6-\$PV \\"
        ewarn "                           && eclectic java-jre set icedtea6-\$PV"
        ewarn
        ewarn "where \$PV is your installed version of icedtea6 as listed by:"
        ewarn
        ewarn "  paludis -q icedtea6"
        ewarn
        eerror "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        eerror "! Proceeding with installation, but ignoring all network sandboxing !"
        eerror "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        unset SYDBOX_NET
    fi

    # Never invoke Ant unless you have a task with which to invoke it, since
    # "build.xml" files often supply a default task performing all relevant
    # tasks when passed no explicit task. (This is rarely what we want.)
    if [[ -n "${ANT_SRC_PREPARE_PARAMS[@]}" ]]; then
        einfo "Preparing build..."
        ANT_SRC_PREPARE_PARAMS=( ${ANT_PARAMS[@]} ${ANT_SRC_PREPARE_PARAMS[@]} )
        ant_src_prepare
    fi

    if [[ -n "${ANT_SRC_PREPARE_SYMLINK_DIR}" ]]; then
        einfo "Linking external jar files..."
        set_symlink_jar_dir "${ANT_SRC_PREPARE_SYMLINK_DIR}"
        symlink_jars         ${ANT_SRC_PREPARE_SYMLINK_JARS[@]}
    fi
}

antefix_src_compile() {
    if [[ -n "${ANT_SRC_COMPILE_PARAMS[@]}" ]]; then
        ANT_SRC_COMPILE_PARAMS=( ${ANT_PARAMS[@]} ${ANT_SRC_COMPILE_PARAMS[@]} )
        ant_src_compile
    fi
}

antefix_src_test() {
    if [[ -n "${ANT_SRC_TEST_PARAMS[@]}" ]]; then
        ANT_SRC_TEST_PARAMS=( ${ANT_PARAMS[@]} ${ANT_SRC_TEST_PARAMS[@]} )
        ant_src_test
    fi
}

antefix_src_install() {
    einfo "Installing documents..."
    emagicdocs

    if [[ -n "${ANT_SRC_INSTALL_PARAMS[@]}" ]]; then
        einfo "Collecting jar files..."
        ANT_SRC_INSTALL_PARAMS=( ${ANT_PARAMS[@]} ${ANT_SRC_INSTALL_PARAMS[@]} )
        ant_src_install
    fi

    if [[ -n "${ANT_SRC_INSTALL_JARS[@]}" ]]; then
        einfo "Installing jar files... ${ANT_SRC_INSTALL_JARS[@]}"
        install_jars ${ANT_SRC_INSTALL_JARS[@]}
    fi
}

# ....................{ SYMLINKERS                         }....................
# The following convenience functions symbolically link external Java libraries
# into the current exhere's work directory prior to compilation of that exheres.

# void set_symlink_jar_dir(char *pathname)
#
# Set the path of the directory into which external jar files should be
# symbolically linked for this exheres. The "build.xml" file for this exheres
# presumably requires these external jar files to be present in this directory
# prior to operation. The "prepare_jar*" family of functions, below, operate on
# this directory until the next invocation of this function.
#
# If absolute, no path processing is performed upon the filename aside from
# ensuring that this path resides under "${WORK}/"; if relative, the absolute
# path "${WORK}/" is prepended to this path.
#
# By convention, this is usually just "lib". Most Java libraries are different,
# of course.
set_symlink_jar_dir() {
    illegal_in_global_scope
    [[ ${#} -eq 1 ]] || die_unless_nonfatal "one and only one argument needed"

    ANT_SRC_PREPARE_SYMLINK_DIR="${1}"

    # If we were passed an absolute path, test it.
    if [[ ${ANT_SRC_PREPARE_SYMLINK_DIR:0:1} = / ]]; then
        [[ "${ANT_SRC_PREPARE_SYMLINK_DIR}" = "${WORK}"* ]] ||
            die_unless_nonfatal "${ANT_SRC_PREPARE_SYMLINK_DIR} not under ${WORK}"
    # If we were passed a relative path, canonicalize it.
    else
        ANT_SRC_PREPARE_SYMLINK_DIR="${WORK}/${ANT_SRC_PREPARE_SYMLINK_DIR}"
    fi

    # If the path exists, remove all jar files the archive extracted into it.
    # This provides a convenient alternative to the rather cumbersome
    # "${ANT_BUNDLED_LIBSDIR}" array.
    if [[ -d "${ANT_SRC_PREPARE_SYMLINK_DIR}" ]]; then
        edo rm -f "${ANT_SRC_PREPARE_SYMLINK_DIR}"/*.jar
    # Otherwise, create the path. It should already be, in general.
    else
        edo install -d "${ANT_SRC_PREPARE_SYMLINK_DIR}"
    fi

    # Notify the world!
    export ANT_SRC_PREPARE_SYMLINK_DIR
}

# void symlink_jars(char *filename1, char *filename2, ...)
#
# Symbolically link jar filenames to relative filenames having the same basename
# under the above directory. Input jar filenames may be either absolute or
# relative. If absolute, no path processing is performed upon the filename; if
# relative, the absolute path "/usr/share/$(basename $filename)/" is prepended
# to that filename. Input jar filenames may or may not have the ".jar" suffix
# appended, as well. Filenames that do not will simply have the ".jar" suffix
# appended. Thus, "jarjar" becomes "/usr/share/jarjar/jarjar.jar". For each
# such filename, this performs the equivalent of:
#
#   ln -s "$filename" "$symlink_jar_dir"/
#
# But that's not all. If relative and not found under
# "/usr/share/$(basename $filename)/", we then look under
# "/usr/share/$(basename ${filename%%-*})/". This is the first part of the
# filename up to but not including the first hyphen. Thus, this:
#   
#   symlink_jars hamcrest-core
#
# tries the following paths in order:
#
# * "/usr/share/hamcrest-core/hamcrest-core.jar", which will not be found. 
# * "/usr/share/hamcrest/hamcrest-core.jar", which will be found. 
#
# In other words, this function has enough cleverness to usually suss out the
# absolute path to whatever you pass it. When it doesn't, simply pass the
# absolute path!
symlink_jars() {
    illegal_in_global_scope
    [[ ${#} -ge 1 ]] || die_unless_nonfatal "at least one argument needed"
    [[ -d "${ANT_SRC_PREPARE_SYMLINK_DIR}" ]] || 
        die_unless_nonfatal "${ANT_SRC_PREPARE_SYMLINK_DIR} not found or not set"

    for JAR_FILE in ${*}; do
        JAR_BASENAME=${JAR_FILE##*/}         # filename sans path
        JAR_ROOTNAME=${JAR_BASENAME/%.jar/}  # filename sans path and type

        # If we were passed a relative path, canonicalize it. Presume all
        # external Java libraries live in their customary directories.
        if [[ ${JAR_FILE:0:1} != / ]]; then
            JAR_FILE="${ROOT}usr/share/${JAR_ROOTNAME}/${JAR_ROOTNAME}.jar"
            if [[ ! -f "${JAR_FILE}" ]]; then
                JAR_FILE="${ROOT}usr/share/${JAR_ROOTNAME%%-*}/${JAR_ROOTNAME}.jar"
                [[  -f "${JAR_FILE}" ]] ||
                    die_unless_nonfatal "${JAR_ROOTNAME}.jar not found"
            fi
        fi

        edo ln -s "${JAR_FILE}" "${ANT_SRC_PREPARE_SYMLINK_DIR}"/
    done
}

# ....................{ INSTALLERS                         }....................
# The following convenience functions install all Java libraries produced by
# this exheres into local directories appropriate for this exheres.

# void install_jars(char *filename1, char *filename2, ...)
#
# Copy absolute filenames to relative filenames having the same basename sans
# version under the above directory. By "sans version", we mean basename minus
# "-${PV}". Jar filenames should be versionless so as to permit their usage
# elsewhere without concern for the specific versions they represent. This
# resembles:
#
#   cp "$filename1" "$filename2" ... "${IMAGE}/$install_jar_dir"
install_jars() {
    illegal_in_global_scope
    [[ ${#} -ge 1 ]] || die_unless_nonfatal "at least one argument needed"

    insinto "${ANT_SRC_INSTALL_JARS_DIR}"
    for JAR_FILE in ${*}; do
        # Strip versions from filenames: e.g., convert "zebrapig-0.42.jar" to
        # "zebrapig.jar". The pattern substitution requires the bash "extglob"
        # shell option be enabled, which it is under exheres-0.
        #
        # See "man bash" for details.
        newins ${JAR_FILE} \
            $(basename "${JAR_FILE/%-+([[:digit:].])*(rc+([[:digit:].])).jar/.jar}")
        #   $(echo "${JAR_FILE##*/}" | sed -e "s:${ANT_JAR_VERSION_PATTERN}$:.jar:")
    done
}

# void install_jar_as(char *filename1, char *filename2)
#
# Copy absolute "$filename1" to relative "$filename2" under the above directory.
# This is functionally equivalent to:
#
#   cp "$filename1" "${IMAGE}/$install_jar_dir/$filename2"
install_jar_as() {
    illegal_in_global_scope
    [[ ${#} -eq 2 ]] || die_unless_nonfatal "exactly two arguments needed"

    JAR_FILE_IN="${1}"
    JAR_FILE_OUT="${2}"

    # Escape the first character of the version pattern to prevent grep from
    # interpreting the character as a dash option.
    if echo "${JAR_FILE_OUT}" | grep -q "\\${ANT_JAR_VERSION_PATTERN}"; then
      ewarn "${JAR_FILE_OUT} contains a version specifier"
    fi

    insinto "${ANT_SRC_INSTALL_JARS_DIR}"
    newins "${JAR_FILE_IN}" "${JAR_FILE_OUT}"
}
