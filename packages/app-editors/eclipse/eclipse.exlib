# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'eclipse-sdk-3.5.1-r1.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation
#
# --------------------( THANKS                             )--------------------
# The maintainers of this exlib appreciatively thank the Gentoo Eclipse team for
# their tremendous effort in modularizing this build process, without which this
# exheres probably would not be.
#
# Thanks, guys.

# --------------------( EXHERES                            )--------------------
#FIXME: Add support for a new "machine_tester.exlib" exlib, ensuring the
#current machine has sufficient capability to make Eclipse.
require antefix
export_exlib_phases src_prepare

# --------------------( VERSIONING                         )--------------------
# Eclipse uses a unique versioning scheme: "${MAJOR}_${MINOR}_${REVISION}". This
# global gives this version, where the "F" in "FV" refers to "fetched" and the
# "V" to "version".
FV=$(ever replace_all _ $PV)

# Eclipse archives its source to a file with basename as below, which unpacks to
# a path of same name. This global gives the basename.
FNV="eclipse-R${FV}-fetched-src"

# Eclipse builds from source via the "eclipse-build" framework. We declare three
# globals describing this framework paralleling the "PV", "PN", and "PNV"
# globals from typical exheres:
#
# * "BV", the version of this framework needed to build this version of Eclipse.
# * "BN", the name of this framework.
# * "BNV", the name and version of this framework.
BV="0_4_0"
BN="eclipse-build"
BNV="${BN}-R${BV}"

# --------------------( CONFIGURATION                      )--------------------
BUGS_TO="leycec@gmail.com"

SUMMARY="A multi-language integrated development environment (IDE)"
DESCRIPTION="
Eclipse is a multi-language software development environment comprising an
integrated development environment (IDE) and extensible plug-in system. It is
written primarily in Java and can be used to develop applications in Java and,
by means of plugins (occasionally written in other languages), such
languages as C, C++, COBOL, Python, Perl, PHP, et al. The IDE may be referred
to as Eclipse ADT for Ada, Eclipse CDT for C, Eclipse JDT for Java, and
Eclipse PDT for PHP.
"

#FIXME: Define additional mirrors.
DOWNLOADS="
http://download.eclipse.org/technology/linuxtools/${BN}/${FNV}.tar.bz2
http://download.eclipse.org/technology/linuxtools/${BN}/${BNV}.tar.gz
"
HOMEPAGE="http://www.eclipse.org"
REMOTE_IDS=""

UPSTREAM_DOCUMENTATION="http://help.eclipse.org/galileo/index.jsp [[ lang = en ]]"
UPSTREAM_RELEASE_NOTES="http://www.eclipse.org/eclipse/development/readme_${PN}_${FV}.html"

SLOT="3.5"
LICENCES="EPL-1.0"
MYOPTIONS+=""

# Eclipse comes bundled with both the 3.x.x. and 4.x.x series of JUnit.
# Therefore, so do we.
DEPENDENCIES+="
    build+run:
        dev-java/asm[>=3.2]
        dev-java/commons-codec[>=1.4]
        dev-java/jsch[>=0.1.42]
        dev-java/junit:3[>=3.8.2]
        dev-java/junit:4[>=4.8.1]
        dev-java/lucene[>=3.0.1]
        dev-java/sat4j-core[>=2.1.1]
        dev-java/sat4j-pb[>=2.1.1]
        dev-java/swt:${SLOT}[>=${PV}]
        dev-java/tomcat:6[>=6.0.26]
"

WORK="${WORKBASE}"/${BNV}

# --------------------( PHASES                             )--------------------
eclipse_src_prepare() {
    eerror "This exheres is still unfinished. Patience, young padawan."
    die
}

#FIXME leycec: A promising post I pounced upon, online.
#FYI: I've stumbled across a working solution for unbundling dependencies that does not require the use of the (sparsely supported) "external" Bundle-ClassPath references and does not require system-installed JARs to contain OSGi metadata:
#
#1. Run Eclipse-Build as usual.
#2. For each dependency JAR in installation/plugins:
#    a. Create a new directory in installation/plugins named using the basename of the plugin JAR.
#    b. Extract plugin.properties and META-INF/MANIFEST.MF from the plugin JAR into the new directory.
#    c. Create symlink(s) to the system-installed JAR(s) in the new directory.
#    d. Remove all "Name" and "SHA1-Digest" entries from META-INF/MANIFEST.MF.
#    e. Add a "Bundle-ClassPath" entry to META-INF/MANIFEST.MF listing the names of the symlink(s) created in step c.
#    f. Add the following XML element as a child of the <artifact> element for the appropriate plugin in artifacts.xml:
#        <repositoryProperties size='1'>
#            <property name='artifact.folder' value='true'/>
#        </repositoryProperties>
#    g. Edit configuration/org.eclipse.equinox.simpleconfigurator/bundles.info to change the ".jar" suffix of the appropriate plugin to "/".
#    h. Delete the dependency JAR from installation/plugins.

