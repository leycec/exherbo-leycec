# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'eclipse-sdk-3.5.1-r1.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation
#
# --------------------( SYNOPSIS                           )--------------------
# This exlib builds Eclipse from source -- with exception of two dependencies,
# Tomcat Jasper and Jetty, whose builds themselves depend on a convoluted
# pyramid of other dependencies and are therefore left as binary dependencies,
# for the moment.
#
# This exlib is resource intensive, typically allocating between 1GB to 4GB of
# memory and an indeterminate amount of disk space. Such is life, Exherbo-style. 
#
# --------------------( OSGi                               )--------------------
# This exlib requires both OSGi and non-OSGi Java dependencies. Both are
# encapsulated in jar files and otherwise provide an identical directory layout
# within those jar files. Superficially therefore, OSGi-conformant jar files and
# non-OSGi-conformant jar files perform identical. The difference lies solely in
# the contents of the "META-INF/MANIFEST.MF" file. In non-OSGi-conformant jar
# files, this manifest has arbritrarily many key value pairs having arbitrary
# key names and values; in other words, no conformance to a helpful standard. In
# OSGi-conformant jar files, however, this manifest has key names and values
# conforming to well-defined industry standards; in other words, predictable.
#
# What's the problem? Most Java projects still ship non-OSGi-conformant jar
# files. For the most part, Eclipse requires absolutely OSGi-conformant jar
# files: even for old projects known not to ship such jar files. Other exheres
# must ensure, therefore, that their "src_install" phase replaces non-OSGi
# "META-INF/MANIFEST.MF" files bundled in their output jar files with OSGi
# "META-INF/MANIFEST.MF" files.
#
# --------------------( SEE ALSO                           )--------------------
# * "Eclipse Build Wiki."
#   http://wiki.eclipse.org/Linux_Tools_Project/Eclipse_Build
#
# --------------------( THANKS                             )--------------------
# The maintainers of this exlib appreciatively thank the Gentoo Eclipse team for
# their tremendous effort in modularizing this build process, without which this
# exheres wouldn't be.
#
# Thanks, guys.
#
# That said, this exheres substantially differs from the ebuild on which it was
# originally based. This is due, in large part, to substantial changes in the
# Eclipse build framework introduced in Eclipse 3.5.2.
 
# ....................{ EXLIB                              }....................
# Eclipse exheres must pass the mandatory "build_v" exparam when requiring this
# exlib. All other exparams are optional and generally need not be passed.
#
# See "Eclipse Build Wiki" above to map Eclipse versions to "build_v" versions.

require antefix
export_exlib_phases src_unpack src_prepare src_compile src_install

# Exheres slot, passed as an exparam so as to be available in global scope.
myexparam slot=
  exparam -v SLOT slot

# Eclipse distributes source via a customary tarball, identified as:
#
# * "fetch_n", this source tarball's name.
# * "fetch_v", this source tarball's version.
# * "fetch_nv", this source tarball's name and version.
# * "fetch_archive", this source tarball's basename.
myexparam fetch_n="${PN}"
  exparam -v ECLIPSE_FETCH_N fetch_n
myexparam fetch_v="${PV}"
  exparam -v ECLIPSE_FETCH_V fetch_v
myexparam fetch_nv="${ECLIPSE_FETCH_N}-${ECLIPSE_FETCH_V}-src"
  exparam -v ECLIPSE_FETCH_NV fetch_nv
myexparam fetch_archive="${ECLIPSE_FETCH_NV}.tar.bz2"
  exparam -v ECLIPSE_FETCH_ARCHIVE fetch_archive

# Eclipse builds from source via the "eclipse-build" framework, identified as:
#
# * "build_n", the name of this framework.
# * "build_v", the version of this framework needed to build this Eclipse version.
#   This must include version prefixes like "R" or suffixes like "_RC6".
# * "build_nv", the name and version of this framework.
# * "build_archive", this framework tarball's basename.
#
# Note -- the source and framework tarballs use different compression schemes.
myexparam build_n="eclipse-build"
  exparam -v ECLIPSE_BUILD_N build_n
myexparam build_v=    # you must pass this exparam!
  exparam -v ECLIPSE_BUILD_V build_v
myexparam build_nv="${ECLIPSE_BUILD_N}-${ECLIPSE_BUILD_V}"
  exparam -v ECLIPSE_BUILD_NV build_nv
myexparam build_archive="${ECLIPSE_BUILD_NV}.tar.bz2"
  exparam -v ECLIPSE_BUILD_ARCHIVE build_archive

# Eclipse requires optional Ant tasks, which Exherbo currently does not provide.
# Instead, fetch a precompiled jar file for each task identified as:
#
# * "ant_n", the ant tarball's name.
# * "ant_v", the ant tarball's version needed for this Eclipse version.
# * "ant_nv", the ant tarball's name and version of this framework.
# * "ant_archive", the ant tarball's basename.
myexparam ant_n="apache-ant"
  exparam -v ECLIPSE_ANT_N ant_n
myexparam ant_v=    # you must pass this exparam!
  exparam -v ECLIPSE_ANT_V ant_v
myexparam ant_nv="${ECLIPSE_ANT_N}-${ECLIPSE_ANT_V}"
  exparam -v ECLIPSE_ANT_NV ant_nv
myexparam ant_archive="${ECLIPSE_ANT_NV}-bin.tar.bz2"
  exparam -v ECLIPSE_ANT_ARCHIVE ant_archive

# ....................{ MAGIC STRINGS                      }....................
# Eclipse analogue to $(uname --operating-system).
ECLIPSE_OS="linux"

# Eclipse analogue to $(uname --machine). The "src_unpack" phase sets this
# constant as this requires inspection of exheres options.
ECLIPSE_BUILD_ARCH=

# Eclipse requires an external "windowing system" against which to build GUI
# widgets. Technically, Eclipse supports a variety of windowing systems: Carbon,
# Cocoa, GTK, Motif, Photon, Win32, and WPF. Force GTK, for the moment.
ECLIPSE_WS="gtk"

# Whitespace-delimited list of all possible values for the above magic strings.
# References to values not matching the current values above are deleted from
# "feature.xml" files when building.
ECLIPSE_OS_ALL="aix hpux linux macosx qnx solaris win32"
ECLIPSE_WS_ALL="carbon cocoa gtk motif photon win32 wpf"
ECLIPSE_BUILD_ARCH_ALL="alpha arm ia64 mips mipsel PA_RISC ppc ppc64 s390 s390x sparc sparc64 x86 x86_64"

# Eclipse package name suffix specific to the current architecture.
ECLIPSE_BUILD_PACKAGE_SUFFIX="${ECLIPSE_WS}.${ECLIPSE_OS}.${ECLIPSE_BUILD_ARCH}"

# Eclipse SWT package name specific to the current architecture.
SWT_PACKAGE_NAME="org.eclipse.swt.${ECLIPSE_BUILD_PACKAGE_SUFFIX}"

# ....................{ EXHERES                            }....................
BUGS_TO="leycec@gmail.com"

SUMMARY="A multi-language integrated development environment (IDE)"
DESCRIPTION="
Eclipse is a multi-language software development environment comprising an
integrated development environment (IDE) and extensible plug-in system. It is
written primarily in Java and can be used to develop applications in Java and,
by means of plugins (occasionally written in other languages), such
languages as C, C++, COBOL, Python, Perl, PHP, et al. The IDE may be referred
to as Eclipse ADT for Ada, Eclipse CDT for C, Eclipse JDT for Java, and
Eclipse PDT for PHP.
"

#FIXME leycec: Define additional mirrors.
#http://repo2.maven.org/maven2/org/mortbay/${JETTY_PN}/${JETTY_UTIL_PN}/6.1.24/jetty-util-6.1.24.jar
#http://maven.simexplorer.org/repo/org/apache/${JASPER_PN}/${JASPER_PV}/${JASPER_PNV}.jar
#EXTRA_WGET+="-U NoSuchBrowser/1.0"
DOWNLOADS="
http://download.${PN}.org/technology/linuxtools/${ECLIPSE_BUILD_N}/${ECLIPSE_FETCH_ARCHIVE}
http://download.${PN}.org/technology/linuxtools/${ECLIPSE_BUILD_N}/${ECLIPSE_BUILD_ARCHIVE}
http://archive.apache.org/dist/ant/binaries/apache-ant-${ECLIPSE_ANT_V}-bin.tar.bz2
"
HOMEPAGE="http://www.${PN}.org"
REMOTE_IDS=""

#FIXME leycec: Refers to the most recent documentation, only.
UPSTREAM_DOCUMENTATION="http://help.${PN}.org/galileo/index.jsp [[ lang = en ]]"
UPSTREAM_RELEASE_NOTES="http://www.${PN}.org/${PN}/development/readme_${PN}_${ECLIPSE_FETCH_V}.html"

LICENCES="EPL-1.0"

# Building Eclipse documentation plugins consumes, on rough average, twice the
# computational resources as not doing so and is thus discouraged.
MYOPTIONS+="
    gnome
    doc    [[ description = [ build eclipse documentation plugins (not recommended) ] ]]
    source [[ description = [ build eclipse source plugins (not recommended) ] ]]
    platform:
        amd64
        x86
"

# Eclipse comes bundled with both the 3.x.x. and 4.x.x series of JUnit.
# Therefore, so do we.
#
# Eclipse installation requires XML munging, and thus a sufficiently capable
# command-line XML parser. This exlib depends on that XML jack-of-all-trades,
# "xmlstarlet". (See discussion in "exlib/maven.exlib" for the justification.)
#
# Eclipse requires:
#
# * "httpcomponents-client:3", most versions.
# * "lucene:1", most versions.
# * "icu4j:4[=4.0.1]", exactly this version. Newer versions of ICU4J bundle
#   localization resources in different directories within the ICU4J jar file,
#   causing Eclipse to die during compilation.
# * "swt", exactly the same slot and version as this exheres.
# 
# Eclipse is seems to be lenient concerning all other exheres. Thus, require the
# newest slots and versions where we can.
DEPENDENCIES+="
    build:
        app-arch/bzip2
        app-text/xmlstarlet
        dev-util/pkg-config
    build+run:
        dev-java/asm:3[>=3.2]
        dev-java/commons-codec:1[>=1.4]
        dev-java/commons-el:1[>=1.0]
        dev-java/commons-logging:1[>=1.1.1]
        dev-java/hamcrest:1[>=1.2]
        dev-java/httpcomponents-client:3[>=3.1]
        dev-java/icu4j:4[=4.0.1]
        dev-java/jsch:0[>=0.1.42]
        dev-java/jetty:6[>=6.1.24]
        dev-java/junit:3[>=3.8.2]
        dev-java/junit:4[>=4.8.1]
        dev-java/lucene:1[>=1.9.1]
        dev-java/sat4j-core:2[>=2.1.1]
        dev-java/sat4j-pb:2[>=2.1.1]
        dev-java/swt:${SLOT}[>=${PV}]
        dev-java/tomcat:6[>=6.0.26]
        x11-libs/gtk+:2
        gnome? (
            gnome-platform/libgnome:2
            gnome-platform/libgnomeui:2
            gnome-platform/gnome-vfs[>=2]
        )
"

WORK="${WORKBASE}/${ECLIPSE_BUILD_NV}"

# Eclipse comes bundled with the kitchen sink. We want that sink.
JAVA_IS_CLEANING_JAR_FILES=

# The "unpack" task in the top-level "build.xml" file unpacks the
# "${ECLIPSE_FETCH_ARCHIVE}" archive.
ANT_SRC_UNPACK_PARAMS=( unpack )

# The "applyPatches" task in the top-level "build.xml" file applies patches (as
# the name suggests) as well as copying
# "eclipse-build-config/build.properties.in" to
# "eclipse-build-config/build.properties". Thus, build files cannot be assumed
# to exist until after invoking this task.
ANT_SRC_PREPARE_PARAMS=( applyPatches )

# The "symlinkDeps" task in the top-level "build.xml" file symlinks exheres-
# installed external jar files into the "plugins/" directory. Due to the
# difficulty of doing this by hand, this is probably the most helpful Ant task
# anyone ever wrote. (Thanks, guys!)
ANT_SRC_CONFIGURE_PARAMS=( symlinkDeps )

# The mother of them all.
ANT_SRC_COMPILE_PARAMS=( build )

# The "install" task in the top-level "build.xml" file installs a target Eclipse
# distribution under "${WORK}/installation".
ANT_SRC_INSTALL_PARAMS=( install )

# Absolute path to the directory into which the "install" task assembles the
# final Eclipse distribution.
ECLIPSE_BUILD_DIR="${WORK}/build/${ECLIPSE_FETCH_NV}"

# Absolute path to the directory into which the Ant tarball is unpacked.
ECLIPSE_ANT_WORK="${WORKBASE}/${ECLIPSE_ANT_NV}"

# Java classpath to core JDK jar files.
ECLIPSE_BOOTSTRAP_CLASSPATH="${JAVA_JRE_LIBRARY_DIR}/rt.jar:${JAVA_JRE_LIBRARY_DIR}/jce.jar"

# Absolute root under which Eclipse is installed.
ECLIPSE_PREFIX="/usr"

# Relative root under ${ECLIPSE_HOME_PREFIX} under which Eclipse is installed.
ECLIPSE_LIBDIR=$(get_libdir)

# Absolute path to which the above "install" task temporarily installs Eclipse.
# This exheres does not actually install Eclipse to this directory, as this
# directory is not slotted.
ECLIPSE_HOME_IMAGE="${IMAGE}${ECLIPSE_PREFIX}/${ECLIPSE_LIBDIR}/${PN}"

# Absolute path to which this exheres permanently installs Eclipse.
ECLIPSE_HOME="${ECLIPSE_PREFIX}/${ECLIPSE_LIBDIR}/${PN}-${SLOT}"

# Relative path under ${WORK} to the property file listing Eclipse's OSGi-
# conformant dependencies.
ECLIPSE_DEPENDENCIES_PROPERTIES="dependencies.properties"

# Relative path under ${WORK} to the property file listing Eclipse's non-OSGi-
# conformant dependencies.
ECLIPSE_NONOSGI_DEPENDENCIES_PROPERTIES="nonosgidependencies.properties"

# Eclipse features are bundles of Eclipse plugins as described by a
# "feature.xml" file under the root directory for each feature. This array
# remains empty until the "src_prepare" phase for reasons discussed there.
ECLIPSE_FEATURE_XML_FILES=( )

# Array of all optional Ant task names to be installed as precompiled jar files.
# (This should eventually be reduced to none.)
ECLIPSE_ANT_BINARY_TASKS=(
    ant-antlr
    ant-apache-bcel ant-apache-bsf ant-apache-log4j ant-apache-oro
    ant-apache-regexp ant-apache-resolver
    ant-commons-logging ant-commons-net
    ant-javamail ant-jdepend ant-jsch
)

# ....................{ PHASES                             }....................
# Do not call the "default_src_unpack" function. Eclipse bundles itself... well,
# rather poorly; we have to unpack it ourselves.
JAVA_IS_UNPACKING_ARCHIVES=

eclipse_src_unpack() {
    # Extract the "eclipse-build" tarball but not the source tarball. The former
    # extracts the latter itself, during the "unpack" Ant task. 
    unpack "${ECLIPSE_BUILD_ARCHIVE}"

    # Extract all precompiled Ant task jar files from its binary tarball into
    # ${TEMP}, so as to avoid overwriting files extracted above.
    echo ">>> Unpacking ${ECLIPSE_BUILD_ARCHIVE} to ${PWD}"
    edo tar xvjf "${FETCHEDDIR}/${ECLIPSE_ANT_ARCHIVE}" \
        --anchored --wildcards "${ECLIPSE_ANT_NV}/lib/*.jar"

    echo ">>> Checking build architecture"
    if   option platform:amd64; then ECLIPSE_BUILD_ARCH="x86_64"
    elif option platform:x86;   then ECLIPSE_BUILD_ARCH="x86"
    fi

    # Notify Ant of our target architecture and bootstrap classpath.
    ANT_PARAMS+=(
        "-DbuildArch=${ECLIPSE_BUILD_ARCH}"
        "-Dbootclasspath=${ECLIPSE_BOOTSTRAP_CLASSPATH}"
        "-DdestDir=${IMAGE}"
        "-Dprefix=${ECLIPSE_PREFIX}"
        "-DlibDir=${ECLIPSE_LIBDIR}"
    )

    echo ">>> Creating directory tree"
    edo ln -s "${FETCHEDDIR}/${ECLIPSE_FETCH_ARCHIVE}" "${WORK}"/

    # Patch the top-level "build.xml" file prior to invoking Ant, below. Note
    # that, as the current directory is not ${WORK} but as all patches assume
    # that is this current directory, pushd there prior to patching.
    echo ">>> Patching build.xml"
    pushd "${WORK}"

    # Prevent Ant from building "gnome" support, if disabled. Note that it is
    # not sufficient to pass "-Dbuild.libgnomeproxy=false", due to subtleties.
    if ! option gnome; then
        xmlstarleted "${ANT_BUILD_XML}" --delete \
            "/project/target[@name='compilelibs']/antcall[@target='compile.libgnomeproxy']"
    fi

    # Prevent Ant from building native SWT C and C++ libraries. We've already
    # built these libraries as an exheres dependency.
    xmlstarleted "${ANT_BUILD_XML}" --delete \
        "/project/target[@name='compilelibs']/ant[@target='build.nativeLibraries']" \

    #FIXME leycec: obsolete; remove when stable.
    # Force Ant to install Eclipse under the multilib directory for this arch.
#   xmlstarlet ed --delete "/project/target[@name='setLib64Dir']/property[@name='libDir']" \
#       "${ANT_BUILD_XML}"
#   xmlstarleted \
#       --update "/project/target[@name='setLibDir']/property[@name='libDir']/@value" \
#       --value $(get_libdir) "${ANT_BUILD_XML}"

    # Pop goes whoever reads comments.
    popd

    # Call the parent "src_unpack" last, as this invokes Ant with the "unpack"
    # task and thus requires Ant parameters to have been established, above.
    antefix_src_unpack
}

eclipse_src_prepare() {
    antefix_src_prepare

    # Glob the set of all "feature.xml" files now; calls to the
    # "eclipse_remove_plugins_matching" function require this set.
    ECLIPSE_ECLIPSE_FEATURE_XML_FILES=( **/feature.xml )

    # Apply exheres-specific patches after applying standard Eclipse patches,
    # above. (Force this odd calling order by doing it ourselves rather than
    # relying on the ${DEFAULT_SRC_PREPARE_PATCHES} array.)
    #
    # These patches are against files residing under ${ECLIPSE_BUILD_DIR} so as
    # to prevent us from having to rewrite all patch files for minor version
    # bumps. Without this, we would have to hardcode paths starting with
    # "build/eclipse-3.5.2-src/" in each patch header. With this, we don't.
    echo ">>> Patching source files"
    pushd "${ECLIPSE_BUILD_DIR}"
    eclipse_patch "gtk-make_linux_mak.patch"
    popd

    # Convert hardcoded library paths to Exherbo-specific library paths. This is
    # only a precautionary measure in the event of Eclipse refusing to recognize
    # the above "-Dbootclasspath=" Ant parameter. (It happens. Believe us.)
    echo ">>> Patching build files"
    local ECLIPSE_BUILD_PROPERTIES
    for   ECLIPSE_BUILD_PROPERTIES in \
        "build.properties" "pdebuild.properties" \
        "${ECLIPSE_BUILD_DIR}/buildConfigs/eclipse-build-config/build.properties" \
        "${ECLIPSE_BUILD_DIR}/plugins/org.eclipse.pde.build/feature/builder/build.properties" \
        "${ECLIPSE_BUILD_DIR}/plugins/org.eclipse.pde.build/templates/headless-build/build.properties" \
        ; do
        edo sed -i "${ECLIPSE_BUILD_PROPERTIES}" -r \
            -e "s~=.+/rt\.jar.*$~=${ECLIPSE_BOOTSTRAP_CLASSPATH}~"
    done

    echo ">>> Removing cross-architecture plugins"
    local ECLIPSE_OS_ALL_BAD=$(eclipse_grep_names_not_matching "${ECLIPSE_OS}" "${ECLIPSE_OS_ALL}")
    local ECLIPSE_WS_ALL_BAD=$(eclipse_grep_names_not_matching "${ECLIPSE_WS}" "${ECLIPSE_WS_ALL}")
    local ECLIPSE_BUILD_ARCH_ALL_BAD=$(eclipse_grep_names_not_matching "${ECLIPSE_BUILD_ARCH}" "${ECLIPSE_BUILD_ARCH_ALL}")

    # Dynamically construct an XPATH expression matching all "feature.xml"
    # plugin elements not corresponding to this architecture. These elements
    # will be removed.
    #
    # Prevent removal of the "org.eclipse.update.core.linux" and
    # "org.eclipse.core.net.linux.x86" plugins regardless of this architecture.
    # These are mandatory plugins.
    local PLUGIN_XPATH_EXPRESSION="(@id!='org.eclipse.update.core.linux' and @id!='org.eclipse.core.net.linux.x86') and ("

    local ECLIPSE_OS_BAD ECLIPSE_WS_BAD ECLIPSE_BUILD_ARCH_BAD
    for   ECLIPSE_OS_BAD in ${ECLIPSE_OS_ALL_BAD} ; do
        PLUGIN_XPATH_EXPRESSION+="@os='${ECLIPSE_OS_BAD}' or "
    done
    for   ECLIPSE_WS_BAD in ${ECLIPSE_WS_ALL_BAD} ; do
        PLUGIN_XPATH_EXPRESSION+="@ws='${ECLIPSE_WS_BAD}' or "
    done
    for   ECLIPSE_BUILD_ARCH_BAD in ${ECLIPSE_BUILD_ARCH_ALL_BAD} ; do
        PLUGIN_XPATH_EXPRESSION+="@arch='${ECLIPSE_BUILD_ARCH_BAD}' or "
    done

    # Replace the last accidentally introduced " or " expression with a trailing ")".
    PLUGIN_XPATH_EXPRESSION="${PLUGIN_XPATH_EXPRESSION% or })"

    # Do it. Do it now!
    eclipse_remove_plugins_matching "${PLUGIN_XPATH_EXPRESSION}"

    echo ">>> Removing cross-architecture SWT plugins"
    eclipse_remove_plugins_matching "(contains(@id, 'org.eclipse.swt.') and not(contains(@id, '${ECLIPSE_BUILD_PACKAGE_SUFFIX}'))) or (contains(@id, 'org.eclipse.equinox.launcher.') and not(contains(@id, '${ECLIPSE_BUILD_PACKAGE_SUFFIX}')))"

    #FIXME leycec: enabling "doc" causes sydbox network violations. Whitelist.
    if ! option doc; then
        echo ">>> Removing documentation plugins"
        eclipse_remove_plugins_matching "contains(@id, '.doc.')"
    fi

    if ! option source; then
        echo ">>> Removing source plugins"
        eclipse_remove_plugins_matching "contains(@id, '.source')"
    fi

    echo ">>> Creating OSGi dependency properties"
    set_osgi_dependency_property "com.ibm.icu"                   "icu4j:4"
    set_osgi_dependency_property "com.jcraft.jsch"               "jsch:0"
    set_osgi_dependency_property "javax.servlet"                 "tomcat:6 servlet-api"
    set_osgi_dependency_property "javax.servlet.jsp"             "tomcat:6 jsp-api"
    set_osgi_dependency_property "org.apache.commons.codec"      "commons-codec:1"
    set_osgi_dependency_property "org.apache.commons.el"         "commons-el:1"
    set_osgi_dependency_property "org.apache.commons.httpclient" "httpcomponents-client:3"
    set_osgi_dependency_property "org.apache.commons.logging"    "commons-logging:1"
    set_osgi_dependency_property "org.apache.jasper"             "tomcat:6 jasper"
    set_osgi_dependency_property "org.apache.lucene"             "lucene:1 lucene-core"
    set_osgi_dependency_property "org.apache.lucene.analysis"    "lucene:1 lucene-analyzers"
    set_osgi_dependency_property "org.hamcrest.core"             "hamcrest:1 hamcrest-core"
    set_osgi_dependency_property "org.mortbay.jetty.server"      "jetty:6"
    set_osgi_dependency_property "org.mortbay.jetty.util"        "jetty:6 jetty-util"
    set_osgi_dependency_property "org.objectweb.asm"             "asm:3 asm-all"
    set_osgi_dependency_property "org.sat4j.core"                "sat4j-core:2 sat4j-core"
    set_osgi_dependency_property "org.sat4j.pb"                  "sat4j-pb:2 sat4j-pb"

    #FIXME leycec: consider reenabling to symlink in SWT. (See below.)
#   add_osgi_dependency_property \
#       "org.eclipse.swt.${ECLIPSE_WS}.${ECLIPSE_OS}.${ECLIPSE_BUILD_ARCH}.jar" \
#       $(which_installed_jar_file "swt:${SLOT}")

    echo ">>> Creating non-OSGi dependency properties"
    set_nonosgi_dependency_property "org.junit"                  "junit:3"
    set_nonosgi_dependency_property "org.junit4"                 "junit:4"

    # Non-OSGI jar files, Ant-specific and provided by the "apache-ant" exheres.
    echo ">>> Creating non-OSGi Ant dependency properties"
    local ECLIPSE_ANT_TASK
    for   ECLIPSE_ANT_TASK in \
        ant ant-jmf ant-junit ant-launcher ant-nodeps ant-swing ant-trax ; do
        # This three parameter version of "set_nonosgi_dependency_property"
        # gets these parameters:
        #
        # {1} "dependencies.properties" jar package.
        # {2} "dependencies.properties" jar pattern.
        # {3} Exherbo-specific jar specifier. The
        #     "which_installed_jar_file_from_spec" function expands this
        #     parameter into an absolute path: e.g.,
        #     "/usr/share/ant/lib/ant-trax.jar".
        set_nonosgi_dependency_property "org.apache.ant" \
               "/lib/${ECLIPSE_ANT_TASK}\\.jar" \
            "ant lib/${ECLIPSE_ANT_TASK}"
    done

    # Non-OSGI jar files, Ant-specific but not provided by the "apache-ant"
    # exheres. Naturally, this should be fixed.
    local ECLIPSE_ANT_BINARY_TASK
    for   ECLIPSE_ANT_BINARY_TASK in "${ECLIPSE_ANT_BINARY_TASKS[@]}"; do
        copy_nonosgi_dependency_property "org.apache.ant" \
            "/lib/${ECLIPSE_ANT_BINARY_TASK}\\.jar" \
            "${ECLIPSE_ANT_WORK}/lib/${ECLIPSE_ANT_BINARY_TASK}.jar"
    done

}

eclipse_src_compile() {
    antefix_src_compile

    #FIXME leycec: should be uncommented at some point to symlink in the
    #already compiled "/usr/share/swt/${SLOT}/swt.jar" file.
#   local SWT_JAR_FILE_TARGET="${ECLIPSE_BUILD_DIR}/plugins/${SWT_PACKAGE_NAME}/${SWT_PACKAGE_NAME}.jar"
#   echo ">>> Symlinking SWT"
#   local SWT_JAR_FILE_SOURCE=$(which_installed_jar_file "swt:${SLOT}")
#   local SWT_JAR_FILE_TARGET="${ECLIPSE_BUILD_DIR}/plugins/${SWT_PACKAGE_NAME}/swt.jar"
#   edo ln -sf "${SWT_JAR_FILE_SOURCE}" "${SWT_JAR_FILE_TARGET}"
}

eclipse_src_install() {
    #FIXME leycec: doesn't work... *sigh*
    # The "install" task eventually calls the "run.director" task, which itself
    # attempts to open spurious IPV6 connections to the localhost. Allow it.
    #
    # For further examples of sydbox syntax, see:
    # http://projects.0x90.dk/repositories/entry/sydbox/tests/progtests/t47-sandbox-network-ipv6.bash?rev=b2ae2ee332bc8a7927640a313d01b4e87580f550
#   sydboxcmd "net/whitelist/connect/inet6://::1"
    ewarn "Disabling network sandboxing..."
    sydboxcmd 'sandunbox/net'
    antefix_src_install
    ewarn "Reenabling network sandboxing..."
    sydboxcmd 'sandbox/net'

    local ECLIPSE_ENVIRO_FILENAME="60${PN}"
    local ECLIPSE_ENVIRO_FILE="/etc/env.d/${ECLIPSE_ENVIRO_FILENAME}"
    local ECLIPSE_CONFIG_FILE="/etc/${PN}.ini"

    #FIXME leycec: replace "plugins/org.eclipse.swt.gtk.linux.x86_64_3.5.2.v3557f.jar"
    #with a system symlink.
    # Install Eclipse to a slotted directory of the proper multilib tree. Note
    # Eclipse installs a "${ECLIPSE_HOME_IMAGE_PREFIX}/share" directory as well,
    # but that it provides so few files as to hardly benefit from slotting.
    echo ">>> Installing distribution tree"
    edo mv  "${ECLIPSE_HOME_IMAGE}" "${IMAGE}${ECLIPSE_HOME}"
    keepdir "${ECLIPSE_HOME}/dropins"
    keepdir "${ECLIPSE_PREFIX}/share/${PN}/dropins"

    # Install the launcher script as "/usr/bin/eclipse-${SLOT}". Note Eclipse
    # installs a "/usr/bin/eclipse" symlink to "/usr/lib/eclipse/bin/eclipse,"
    # the binary Eclipse executable. Remove this, as running the raw executable
    # is a bit unhelpful. (And besides, the absolute path of the raw executable
    # is changed to "/usr/$(get_libdir)/eclipse/bin/eclipse", meaning we would
    # have to replace the symlink anyway. It's more trouble than it's worth!)
    echo ">>> Installing launcher script"
    edo rm "${IMAGE}${ECLIPSE_PREFIX}/bin/eclipse"
    edo cp "${FILES}/${SLOT}/${PN}.bash" "${TEMP}"/
    edo sed -i "${TEMP}/${PN}.bash" \
        -e "s~__ECLIPSE_CONFIG_FILE__~${ECLIPSE_CONFIG_FILE}~" \
        -e "s~__ECLIPSE_ENVIRO_FILE__~${ECLIPSE_ENVIRO_FILE}~"
    newbin "${TEMP}/${PN}.bash" "${PN}-${SLOT}"

    # Install the launcher configuration files.
    echo ">>> Installing environment file"
    hereenvd "${ECLIPSE_ENVIRO_FILENAME}" <<EOF
ECLIPSE_HOME="${ECLIPSE_HOME}"
EOF

    # FIXME leycec: obsolete; Remove when stabilized.
#   hereconfd "${ECLIPSE_CONFIG_FILENAME}" <<EOF
## Require Eclipse to allocate at least VMARGS_XMS much memory but no more than
## VMARGS_XMX much memory, where the 'm' refers to megabyte and 'g' to gigabyte.
## If you receive "OutOfMemory" exceptions, double these values until you don't.
#VMARGS_XMS=256m
#VMARGS_XMX=512m
#EOF
}

# ....................{ PATCHES                            }....................
# void eclipse_patch(char *file1, char *file2, ...)
#
# Mimic the "expatch" function by patching the passed relative filenames under
# ${ECLIPSE_FILES_DIR}. The "expatch" function refuses to run from any phase
# except "src_prepare", which is fairly silly. Call "patch" instead, and shrug.
eclipse_patch() {
    illegal_in_global_scope
    [[ ${#} -ge 1 ]] || die_unless_nonfatal "at one argument needed"

    local PATCH_FILENAME PATCH_FILE
    for   PATCH_FILENAME in "${@}"; do
          PATCH_FILE="${FILES}/${SLOT}/${PATCH_FILENAME}"
          echo "cat -- '${PATCH_FILE}' | patch -s -f -p1"
                cat -- "${PATCH_FILE}" | patch -s -f -p1
          paludis_assert_unless_nonfatal "applying \"${PATCH_FILE}\" failed"
    done
}

# ....................{ XMLSTARLET                         }....................
# void xmlstarleted(char *filename, char *param1, char *param2, ...)
#
# Calls "xmlstarlet ed" on the passed file with the passed arguments. For
# details, see "xmlstarlet ed --help".
#
# Note that calling this bizarrely erases the contents of the input file when
# redirecting stdout directly to that file via a customary trailing '>'.
# So, instead redirect stdout to a temporary file and move the temporary
# file to the input file.
xmlstarleted() {
    illegal_in_global_scope
    [[ ${#} -ge 2 ]] || die_unless_nonfatal "at least two arguments needed"

    local XMLSTARLETED_TEMP_FILE="${TEMP}/xmlstarleted.xml"
    local XMLSTARLETED_FILE="${1}"
    shift

    edo xmlstarlet ed "${@}" "${XMLSTARLETED_FILE}" > "${XMLSTARLETED_TEMP_FILE}"
    edo mv "${XMLSTARLETED_TEMP_FILE}" "${XMLSTARLETED_FILE}"
}

# ....................{ PLUGINS                            }....................
eclipse_grep_names_not_matching() {
    illegal_in_global_scope
    [[ ${#} -eq 2 ]] || die_unless_nonfatal "exactly two arguments needed"

    local NAME_PATTERN="${1}"
    local ALL_NAMES="${2}"

    # Cut the passed name pattern from the passed whitespace-delimited string of
    # all such strings. Note this uses sed rather than Bash regular expressions:
    # not because it has to, but because it was easier and more reliable to.
    echo "${ALL_NAMES}" | sed -r \
        -e "s~[[:space:]]?${NAME_PATTERN}([[:space:]]?)~\\1~" \
        -e 's~^[[:space:]]+~~'
}

eclipse_remove_plugins_matching() {
    illegal_in_global_scope
    [[ ${#} -eq 1 ]] || die_unless_nonfatal "exactly one argument needed"
    [[ -n "${ECLIPSE_ECLIPSE_FEATURE_XML_FILES[@]}" ]] ||
        die_unless_nonfatal "\$ECLIPSE_ECLIPSE_FEATURE_XML_FILES not set"

    local PLUGIN_XPATH_EXPRESSION="${1}"

    # Delete all plugin entries matching a fairly self-explanatory XPATH
    # expression from all "feature.xml" files.
    local ECLIPSE_FEATURE_XML_FILE_TEMP="${TEMP}/feature.xml"
    local ECLIPSE_FEATURE_XML_FILE
    for   ECLIPSE_FEATURE_XML_FILE in "${ECLIPSE_ECLIPSE_FEATURE_XML_FILES[@]}"; do
        # Plugin elements in "feature.xml" files denote those plugins as
        # belonging to this features. Include elements in the same files
        # denote that, though the plugins referenced in those elements do not
        # belong to this feature, they are dependencies of this feature.
        # Plugin or include elements matching the passed XPATH expression both
        # signify a plugin to be deleted, and thus must be. We express this via
        # the XPATH union operator, '|'.
        xmlstarleted "${ECLIPSE_FEATURE_XML_FILE}" --delete \
            "/feature/plugin[${PLUGIN_XPATH_EXPRESSION}] | /feature/includes[${PLUGIN_XPATH_EXPRESSION}]"
    done

    #FIXME: ...should probably do this, at some point.
    # Delete the plugins themselves.
#   edo rm -rf "${ECLIPSE_BUILD_DIR}/plugins"/*${PLUGINS_PATTERN}{,_*,.*}
}

# ....................{ DEPENDENCIES                       }....................
set_osgi_dependency_property() {
    set_dependency_property "${ECLIPSE_DEPENDENCIES_PROPERTIES}" "${@}"
}
set_nonosgi_dependency_property() {
    set_dependency_property "${ECLIPSE_NONOSGI_DEPENDENCIES_PROPERTIES}" "${@}"
}

set_dependency_property() {
    illegal_in_global_scope
    [[ ${#} -eq 3 ]] ||
    [[ ${#} -eq 4 ]] || die_unless_nonfatal "three or four arguments needed"

    local DEPENDENCIES_PROPERTIES_FILE="${1}"
    local ECLIPSE_JAR_PACKAGE="${2}"
    local ECLIPSE_JAR_FILENAME

    if [[ ${#} -eq 3 ]]
    then ECLIPSE_JAR_FILENAME='\.jar'
    else ECLIPSE_JAR_FILENAME="${3}"; shift
    fi

    local EXHERBO_JAR_FILE=$(which_installed_jar_file_from_spec "${3}")
    edo sed -i "${DEPENDENCIES_PROPERTIES_FILE}" -r \
        -e "s~^(${ECLIPSE_JAR_PACKAGE}.+${ECLIPSE_JAR_FILENAME}=).+$~\\1${EXHERBO_JAR_FILE}~"
}

add_osgi_dependency_property() {
    add_dependency_property "${ECLIPSE_DEPENDENCIES_PROPERTIES}" "${@}"
}
add_nonosgi_dependency_property() {
    add_dependency_property "${ECLIPSE_NONOSGI_DEPENDENCIES_PROPERTIES}" "${@}"
}

add_dependency_property() {
    illegal_in_global_scope
    [[ ${#} -eq 3 ]] || die_unless_nonfatal "exactly three arguments needed"

    local DEPENDENCIES_PROPERTIES_FILE="${1}"
    local ECLIPSE_JAR_FILENAME="${2}"
    local EXHERBO_JAR_FILE=$(which_installed_jar_file_from_spec "${3}")
    edo cat <<EOF >> "${DEPENDENCIES_PROPERTIES_FILE}"
${ECLIPSE_JAR_FILENAME}=${EXHERBO_JAR_FILE}
EOF
}

copy_osgi_dependency_property() {
    copy_dependency_property "${ECLIPSE_DEPENDENCIES_PROPERTIES}" "${@}"
}
copy_nonosgi_dependency_property() {
    copy_dependency_property "${ECLIPSE_NONOSGI_DEPENDENCIES_PROPERTIES}" "${@}"
}

copy_dependency_property() {
    illegal_in_global_scope
    [[ ${#} -eq 3 ]] ||
    [[ ${#} -eq 4 ]] || die_unless_nonfatal "three or four arguments needed"

    local DEPENDENCIES_PROPERTIES_FILE="${1}"
    local ECLIPSE_JAR_PACKAGE="${2}"
    local ECLIPSE_JAR_FILENAME

    if [[ ${#} -eq 3 ]]
    then ECLIPSE_JAR_FILENAME='\.jar'
    else ECLIPSE_JAR_FILENAME="${3}"; shift
    fi

    local EXHERBO_JAR_FILE="${3}"

    # Make a PCRE matching the passed Java package name. This requires grep be
    # called with the "-E" option and sed with the "-r" option.
    local ECLIPSE_JAR_PACKAGE_PATTERN="^${ECLIPSE_JAR_PACKAGE}_.+${ECLIPSE_JAR_FILENAME}="

    # Grep the filename Eclipse expects to find this jar file under from the
    # passed dependency properties file. (Since this grep expression unavoidably
    # greps a trailing '=' character, explicitly chomp it with a sed pipe.)
    local ECLIPSE_JAR_FILENAME=$(grep -m 1 -Eo -e "${ECLIPSE_JAR_PACKAGE_PATTERN}" "${DEPENDENCIES_PROPERTIES_FILE}" | sed 's~=$~~')
    local ECLIPSE_JAR_FILE="${ECLIPSE_BUILD_DIR}/plugins/${ECLIPSE_JAR_FILENAME}"
    local ECLIPSE_JAR_DIR="${ECLIPSE_JAR_FILE%/*}"

    # Now remove this filename from the same file, since entries in this file
    # are filenames to be symlinked. This function does not symlink this file;
    # instead, it moves it as is to the Eclipse "plugins/" directory.
    #
    # Note we use a little known sed feature, here. The
    # ${ECLIPSE_JAR_PACKAGE_PATTERN} may contain slashes; however, this
    # conflicts with seds default use of slashes as range match delimiters. To
    # circumvent this, assign its range match delimiter to an infrequently used
    # character: here, '~'. To do so, that character must be prefixed with '\'.
    edo sed -r -e "\\~${ECLIPSE_JAR_PACKAGE_PATTERN}~d" \
        -i "${DEPENDENCIES_PROPERTIES_FILE}"

    # Move the downloaded jar file to this filename in this directory.
    [[  -d "${ECLIPSE_JAR_DIR}" ]] || edo mkdir -p "${ECLIPSE_JAR_DIR}"
    edo mv "${EXHERBO_JAR_FILE}" "${ECLIPSE_JAR_FILE}"
}

