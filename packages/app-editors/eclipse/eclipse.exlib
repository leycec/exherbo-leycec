# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'eclipse-sdk-3.5.1-r1.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation
#
# --------------------( SYNOPSIS                           )--------------------
# This exlib builds Eclipse from source -- with exception of two dependencies,
# Tomcat Jasper and Jetty, whose builds themselves depend on a convoluted
# pyramid of other dependencies and are therefore left as binary dependencies,
# for the moment.
#
# This exlib is resource intensive, typically allocating between 1GB to 4GB of
# memory and an indeterminate amount of disk space. Such is life, Exherbo-style. 
#
# --------------------( SEE ALSO                           )--------------------
# * "Eclipse Build Wiki."
#   http://wiki.eclipse.org/Linux_Tools_Project/Eclipse_Build
#
# --------------------( THANKS                             )--------------------
# The maintainers of this exlib appreciatively thank the Gentoo Eclipse team for
# their tremendous effort in modularizing this build process, without which this
# exheres wouldn't be.
#
# Thanks, guys.
 
# ....................{ EXLIB                              }....................
# Eclipse exheres must pass the mandatory "bv" exparam when requiring this
# exlib. All other exparams are optional and generally need not be passed.
#
# See "Eclipse Build Wiki" above to map Eclipse versions to "bv" versions.

require antefix java-manifest
export_exlib_phases src_unpack src_prepare src_install

# Eclipse distributes source via a customary tarball, identified as:
#
# * "fn", this source tarball's prefix.
# * "fv", this source tarball's version.
# * "fnv", this source tarball's prefix and version.
# * "fnv_archive", this source tarball's basename.
myexparam fn="${PN}"
  exparam -v FN fn
myexparam fv="${PV}"
  exparam -v FV fv
myexparam fnv="${FN}-${FV}-src"
  exparam -v FNV fnv
myexparam fnv_archive="${FNV}.tar.bz2"
  exparam -v FNV_ARCHIVE fnv_archive

# Eclipse builds from source via the "eclipse-build" framework, identified as:
#
# * "bn", the name of this framework.
# * "bv", the version of this framework needed to build this Eclipse version.
#   This must include version prefixes like "R" or suffixes like "_RC6".
# * "bnv", the name and version of this framework.
# * "bnv_archive", this framework tarball's basename.
#
# Note -- the source and framework tarballs use different compression schemes.
myexparam bn="eclipse-build"
  exparam -v BN bn
myexparam bv=    # you must pass this exparam!
  exparam -v BV bv
myexparam bnv="${BN}-${BV}"
  exparam -v BNV bnv
myexparam bnv_archive="${BNV}.tar.bz2"
  exparam -v BNV_ARCHIVE bnv_archive

# ....................{ MAGIC STRINGS                      }....................
# Eclipse analogue to $(uname --operating-system).
ECLIPSE_OS="linux"

# Eclipse analogue to $(uname --machine). The "src_unpack" phase sets this
# constant as this requires inspection of exheres options.
ECLIPSE_BUILD_ARCH=

# Eclipse requires an external "windowing system" against which to build GUI
# widgets. Technically, Eclipse supports a variety of windowing systems: Carbon,
# Cocoa, GTK, Motif, Photon, Win32, and WPF. Force GTK, for the moment.
ECLIPSE_WS="gtk"

# ....................{ EXHERES                            }....................
BUGS_TO="leycec@gmail.com"

SUMMARY="A multi-language integrated development environment (IDE)"
DESCRIPTION="
Eclipse is a multi-language software development environment comprising an
integrated development environment (IDE) and extensible plug-in system. It is
written primarily in Java and can be used to develop applications in Java and,
by means of plugins (occasionally written in other languages), such
languages as C, C++, COBOL, Python, Perl, PHP, et al. The IDE may be referred
to as Eclipse ADT for Ada, Eclipse CDT for C, Eclipse JDT for Java, and
Eclipse PDT for PHP.
"

#FIXME: Define additional mirrors. Also fetch jasper-5.5.*, jetty-6.1.*, and
# jetty-util-6.1.*.
DOWNLOADS="
http://download.${PN}.org/technology/linuxtools/${BN}/${FNV_ARCHIVE}
http://download.${PN}.org/technology/linuxtools/${BN}/${BNV_ARCHIVE}
"
HOMEPAGE="http://www.${PN}.org"
REMOTE_IDS=""

#FIXME: Refers to the most recent documentation, only.
UPSTREAM_DOCUMENTATION="http://help.${PN}.org/galileo/index.jsp [[ lang = en ]]"
UPSTREAM_RELEASE_NOTES="http://www.${PN}.org/${PN}/development/readme_${PN}_${FV}.html"

SLOT="3.5"
LICENCES="EPL-1.0"

# Building Eclipse documentation plugins consumes, on rough average, twice the
# computational resources as not doing so and is thus discouraged.
MYOPTIONS+="
    gnome
    doc    [[ description = [ build eclipse documentation plugins (not recommended) ] ]]
    source [[ description = [ build eclipse source plugins ] ]]
    platform:
        amd64
        x86
"

#FIXME: "libgnome" and "libgnomeui" are deprecated. Where do we go from here?
# Eclipse comes bundled with both the 3.x.x. and 4.x.x series of JUnit.
# Therefore, so do we.
#
# Eclipse installation requires XML munging, and thus a sufficiently capable
# command-line XML parser. This exlib depends on that XML jack-of-all-trades,
# "xmlstarlet". (See discussion in "exlib/maven.exlib" for the justification.)
DEPENDENCIES+="
    build:
        app-arch/bzip2
        app-text/xmlstarlet
        dev-util/pkg-config
    build+run:
        dev-java/asm[>=3.2]
        dev-java/commons-codec[>=1.4]
        dev-java/commons-el[>=1.0]
        dev-java/commons-logging[>=1.1.1]
        dev-java/httpcomponents-client:3[>=3.1]
        dev-java/jsch[>=0.1.42]
        dev-java/junit:3[>=3.8.2]
        dev-java/junit:4[>=4.8.1]
        dev-java/lucene[>=3.0.1]
        dev-java/sat4j-core[>=2.1.1]
        dev-java/sat4j-pb[>=2.1.1]
        dev-java/swt:${SLOT}[>=${PV}]
        dev-java/tomcat:6[>=6.0.26]
        x11-libs/gtk+:2
        gnome? (
            gnome-platform/libgnome:2
            gnome-platform/libgnomeui:2
            gnome-platform/gnome-vfs[>=2]
        )
"

WORK="${WORKBASE}/${BNV}"

# Absolute path to the directory into which "build.xml" assembles the final
# Eclipse distribution.
ECLIPSE_BUILD_DIR="${WORK}/build/${FNV}"

# Eclipse comes bundled with the kitchen sink. We want that sink.
JAVA_IS_CLEANING_JAR_FILES=

# The "unpack" task in the top-level "build.xml" file unpacks the
# "${FNV_ARCHIVE}" archive.
ANT_SRC_UNPACK_PARAMS=( unpack )

# The "applyPatches" task in the top-level "build.xml" file applies patches (as
# the name suggests) as well as copying
# "eclipse-build-config/build.properties.in" to
# "eclipse-build-config/build.properties". Thus, build files cannot be assumed
# to exist until after invoking this task.
ANT_SRC_PREPARE_PARAMS=( applyPatches )

# The "symlinkDeps" task the top-level "build.xml" file symlinks exheres-
# installed external jar files into the "plugins/" directory. Due to the
# difficulty of doing this by hand, this is probably the most helpful Ant task
# anyone ever wrote. (Thanks, guys!)
ANT_SRC_CONFIGURE_PARAMS=( symlinkDeps )
ANT_SRC_COMPILE_PARAMS=( build )
ANT_SRC_INSTALL_PARAMS=( jar )

# Eclipse features are bundles of Eclipse plugins as described by a
# "feature.xml" file under the root directory for each feature. This array
# remains empty until the "src_prepare" phase for reasons discussed there.
FEATURE_XML_FILES=( )

# ....................{ PHASES                             }....................
# Do not call the "default_src_unpack" function. Eclipse bundles itself in
# an odd manner; we have to unpack it ourselves.
JAVA_IS_UNPACKING_MANUALLY=1

eclipse_src_unpack() {
#   which_installed_jar_file_from_spec "ant lib/ant-trax"
#   which_installed_jar_file_from_spec "tomcat:6 servlet-api"
#   which_installed_jar_file "swt:${SLOT}"

    # Extract the "eclipse-build" tarball but not the source tarball. The former
    # extracts the latter itself, during invocation of . 
    echo ">>> Unpacking ${BNV_ARCHIVE} to ${PWD}"
    unpack "${BNV_ARCHIVE}"

    echo ">>> Checking architecture"
    if   option platform:amd64; then ECLIPSE_BUILD_ARCH="x86_64"
    elif option platform:x86;   then ECLIPSE_BUILD_ARCH="x86"
    fi

    # Notify Ant of our target architecture.
    ANT_PARAMS+=( "-DbuildArch=${ECLIPSE_BUILD_ARCH}" )

    # Notify Ant of whether or not we're building "gnome" support.
    ANT_PARAMS+=( "-Dbuild.libgnomeproxy="$(option gnome && echo true || echo false) )

    echo ">>> Creating directory tree"
    edo ln -s "${FETCHEDDIR}/${FNV_ARCHIVE}" "${WORK}"/

    # Patch the top-level "build.xml" file prior to invoking Ant, below. Note
    # that, as the current directory is not ${WORK} but as all patches assume
    # that is this current directory, pushd there prior to patching.
    echo ">>> Patching build.xml"
    pushd "${WORK}"
    eclipse_patch "build_xml.patch"
    popd

    # Call the parent "src_unpack" last, as this invokes Ant with the "unpack"
    # task and thus requires Ant parameters to have been established, above.
    antefix_src_unpack
}

eclipse_src_prepare() {
    antefix_src_prepare

    # Apply exheres-specific patches after applying standard Eclipse patches,
    # above. (Force this odd calling order by doing it ourselves rather than
    # relying on the ${DEFAULT_SRC_PREPARE_PATCHES} array.)
    #
    # These patches are against files residing under ${ECLIPSE_BUILD_DIR} so as
    # to prevent us from having to rewrite all patch files for minor version
    # bumps. Without this, we would have to hardcode paths starting with
    # "build/eclipse-3.5.2-src/" in each patch header. With this, we don't.
    echo ">>> Patching source files"
    pushd "${ECLIPSE_BUILD_DIR}"
    eclipse_patch "gtk-make_linux_mak.patch"
    popd

    # Convert hardcoded library paths to Exherbo-specific library paths.
    echo ">>> Patching build files"
    edo sed -i {pde,}build.properties -r \
        -e "s~/.+/rt\.jar:.+$~${JAVA_JRE_LIBRARY_DIR}/rt.jar:${JAVA_JRE_LIBRARY_DIR}/jce.jar~"

    echo ">>> Creating dependency properties"

    # OSGI jar files.
    set_osgi_dependency_property "com.ibm.icu"                   "icu4j"
    set_osgi_dependency_property "com.jcraft.jsch"               "jsch"
    set_osgi_dependency_property "javax.servlet"                 "tomcat:6 servlet-api"
    set_osgi_dependency_property "javax.servlet.jsp"             "tomcat:6 jsp-api"
    set_osgi_dependency_property "org.apache.commons.codec"      "commons-codec"
    set_osgi_dependency_property "org.apache.commons.el"         "commons-el"
    set_osgi_dependency_property "org.apache.commons.httpclient" "httpcomponents-client:3"
    set_osgi_dependency_property "org.apache.commons.logging"    "commons-logging"
    set_osgi_dependency_property "org.apache.lucene"             "lucene-core"
    set_osgi_dependency_property "org.apache.lucene.analysis"    "lucene-analyzers"
    set_osgi_dependency_property "org.hamcrest.core"             "hamcrest-core"
    set_osgi_dependency_property "org.objectweb.asm"             "asm"
    set_osgi_dependency_property "org.sat4j.core"                "sat4j-core"
    set_osgi_dependency_property "org.sat4j.pb"                  "sat4j-pb"

    # Non-OSGI jar files.
    set_nonosgi_dependency_property "org.junit"                  "junit:3"
    set_nonosgi_dependency_property "org.junit4"                 "junit:4"
    add_nonosgi_dependency_property \
        "org.eclipse.swt.${ECLIPSE_WS}.${ECLIPSE_OS}.${ECLIPSE_BUILD_ARCH}.jar" \
        $(which_installed_jar_file "swt:${SLOT}")

    # Non-OSGI jar files, Ant-specific.
    local ANT_JAR_ROOTNAME
    for   ANT_JAR_ROOTNAME in \
        ant ant-jmf ant-junit ant-launcher ant-nodeps ant-swing ant-trax ; do
        # This three parameter version of "set_nonosgi_dependency_property"
        # gets these parameters:
        #
        # {1} "dependencies.properties" jar package.
        # {2} "dependencies.properties" jar pattern.
        # {3} Exherbo-specific jar specifier. The
        #     "which_installed_jar_file_from_spec" function expands this
        #     parameter into an absolute path: e.g.,
        #     "/usr/share/ant/lib/ant-trax.jar".
        set_nonosgi_dependency_property "org.apache.ant" \
                "lib/${ANT_JAR_ROOTNAME}\\.jar" \
            "ant lib/${ANT_JAR_ROOTNAME}"
    done

    # Glob the set of all "feature.xml" files now; calls to the
    # "eclipse_remove_plugins_containing" function require this set.
    FEATURE_XML_FILES=( **/feature.xml )

#   if ! option doc; then
#       echo ">>> Removing Eclipse documentation plugins from ${FEATURE_XML_FILES[@]}"
#       eclipse_remove_plugins_containing '.doc'
#   fi

#   if ! option source; then
#       echo ">>> Removing Eclipse source plugins"
#       eclipse_remove_plugins_containing '.source'
#   fi
}

eclipse_src_install() {
    antefix_src_install

    local ECLIPSE_ENVIRO_FILENAME="60eclipse"
    local ECLIPSE_CONFIG_FILENAME="eclipse"
    local ECLIPSE_LAUNCH_FILENAME="eclipse-${SLOT}"
    local ECLIPSE_ENVIRO_FILE="/etc/env.d/${ECLIPSE_ENVIRO_FILENAME}"
    local ECLIPSE_CONFIG_FILE="/etc/conf.d/${ECLIPSE_CONFIG_FILENAME}"
    local ECLIPSE_LAUNCH_FILE="/usr/bin/${ECLIPSE_LAUNCH_FILENAME}"
    local ECLIPSE_HOME="/usr/$(get_libdir)/eclipse-${SLOT}"
#   local ECLIPSE_BIN="${ECLIPSE_HOME}/eclipse"

    #FIXME leycec: needed?
#   edo chmod +x "${ECLIPSE_BUILD_DIR}/installation/eclipse"
#   edo rm "${ECLIPSE_BUILD_DIR}/installation/libcairo-swt.so"

    echo ">>> Installing distribution tree..."
    insinto "${ECLIPSE_HOME}"
    doins -r "${ECLIPSE_BUILD_DIR}/installation"/*

    echo ">>> Installing launcher files..."

    # Install the launcher script as "/usr/bin/eclipse-${SLOT}".
    edo cp "${ECLIPSE_FILES_DIR}/eclipse.bash" "${TEMP}"/
    edo sed -i "${TEMP}/eclipse.bash" \
        -e "s~__ECLIPSE_CONFIG_FILE__~${ECLIPSE_CONFIG_FILE}"
        -e "s~__ECLIPSE_ENVIRO_FILE__~${ECLIPSE_ENVIRO_FILE}"
    newbin "${TEMP}/eclipse.bash" "eclipse-${SLOT}"

    # Install the launcher configuration files.
    hereenvd "${ECLIPSE_ENVIRO_FILENAME}" <<EOF
ECLIPSE_HOME="${ECLIPSE_HOME}"
EOF

    # FIXME leycec: also set "VMARGS_XX_PERMSIZE" and "VMARGS_XX_PERMSIZE". I
    # can't be bothered, at the moment.
    hereconfd "${ECLIPSE_CONFIG_FILENAME}" <<EOF
# Require Eclipse to allocate at least VMARGS_XMS much memory but no more than
# VMARGS_XMX much memory, where the 'm' refers to megabyte and 'g' to gigabyte.
# If you receive "OutOfMemory" exceptions, double these values until you don't.
VMARGS_XMS=256m
VMARGS_XMX=512m
EOF
}

# ....................{ PATCHES                            }....................
# void eclipse_patch(char *file1, char *file2, ...)
#
# Mimic the "expatch" function by patching the passed relative filenames under
# ${ECLIPSE_FILES_DIR}. The "expatch" function refuses to run from any phase
# except "src_prepare", which is fairly silly. Call "patch" instead, and shrug.
eclipse_patch() {
    illegal_in_global_scope
    [[ ${#} -ge 1 ]] || die_unless_nonfatal "at one argument needed"

    local PATCH_FILENAME PATCH_FILE
    for   PATCH_FILENAME in "${@}"; do
          PATCH_FILE="${FILES}/${SLOT}/${PATCH_FILENAME}"
          echo "cat -- '${PATCH_FILE}' | patch -s -f -p1"
                cat -- "${PATCH_FILE}" | patch -s -f -p1
          paludis_assert_unless_nonfatal "applying \"${PATCH_FILE}\" failed"
    done
}

# ....................{ DEPENDENCIES                       }....................
set_osgi_dependency_property() {
    set_dependency_property "dependencies.properties" "${@}"
}
set_nonosgi_dependency_property() {
    set_dependency_property "nonosgidependencies.properties" "${@}"
}

set_dependency_property() {
    illegal_in_global_scope
    [[ ${#} -eq 3 ]] ||
    [[ ${#} -eq 4 ]] || die_unless_nonfatal "three or four arguments needed"

    local DEPENDENCIES_PROPERTIES_FILE="${1}"
    local ECLIPSE_JAR_PACKAGE="${2}"
    local ECLIPSE_JAR_FILENAME

    if [[ ${#} -eq 3 ]]
    then ECLIPSE_JAR_FILENAME='\.jar'
    else ECLIPSE_JAR_FILENAME="${3}"; shift
    fi

    local EXHERBO_JAR_FILE=$(which_installed_jar_file_from_spec "${3}")
    edo sed -i "${DEPENDENCIES_PROPERTIES_FILE}" -r \
        -e "s~^(${ECLIPSE_JAR_PACKAGE}.+${ECLIPSE_JAR_FILENAME}=).+$~\\1${EXHERBO_JAR_FILE}~"
}

add_osgi_dependency_property() {
    add_dependency_property "dependencies.properties" "${@}"
}
add_nonosgi_dependency_property() {
    add_dependency_property "nonosgidependencies.properties" "${@}"
}

add_dependency_property() {
    illegal_in_global_scope
    [[ ${#} -eq 3 ]] || die_unless_nonfatal "exactly three arguments needed"

    local DEPENDENCIES_PROPERTIES_FILE="${1}"
    local ECLIPSE_JAR_FILENAME="${2}"
    local EXHERBO_JAR_FILE=$(which_installed_jar_file_from_spec "${3}")
    edo cat <<EOF >> "${DEPENDENCIES_PROPERTIES_FILE}"
${ECLIPSE_JAR_FILENAME}=${EXHERBO_JAR_FILE}
EOF
}

# ....................{ PLUGINS                            }....................
eclipse_remove_plugins_containing() {
    illegal_in_global_scope
    [[ ${#} -eq 1 ]] || die_unless_nonfatal "exactly one argument needed"
    [[ -n "${FEATURE_XML_FILES[@]}" ]] ||
        die_unless_nonfatal "\$FEATURE_XML_FILES not set"

    local PLUGINS_PATTERN="${1}"

    # Delete all plugin entries matching a fairly self-explanatory XPATH
    # expression from all "feature.xml" files.
    for FEATURE_XML_FILE in "${FEATURE_XML_FILES[@]}"; do
        edo xmlstarlet ed --delete \
            "/feature/plugin[contains(@id, '${PLUGINS_PATTERN}')]" \
            "${FEATURE_XML_FILE}" > "${FEATURE_XML_FILE}"
    done

    # Delete the plugins themselves.
    edo rm -rf "${ECLIPSE_BUILD_DIR}/plugins"/*${PLUGINS_PATTERN}{,.*}
}

#FIXME leycec: A promising post I pounced upon, online.
#FYI: I've stumbled across a working solution for unbundling dependencies that does not require the use of the (sparsely supported) "external" Bundle-ClassPath references and does not require system-installed JARs to contain OSGi metadata:
#
#1. Run Eclipse-Build as usual.
#2. For each dependency JAR in installation/plugins:
#    a. Create a new directory in installation/plugins named using the basename of the plugin JAR.
#    b. Extract plugin.properties and META-INF/MANIFEST.MF from the plugin JAR into the new directory.
#    c. Create symlink(s) to the system-installed JAR(s) in the new directory.
#    d. Remove all "Name" and "SHA1-Digest" entries from META-INF/MANIFEST.MF.
#    e. Add a "Bundle-ClassPath" entry to META-INF/MANIFEST.MF listing the names of the symlink(s) created in step c.
#    f. Add the following XML element as a child of the <artifact> element for the appropriate plugin in artifacts.xml:
#        <repositoryProperties size='1'>
#            <property name='artifact.folder' value='true'/>
#        </repositoryProperties>
#    g. Edit configuration/org.eclipse.equinox.simpleconfigurator/bundles.info to change the ".jar" suffix of the appropriate plugin to "/".
#    h. Delete the dependency JAR from installation/plugins.

