# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'swt-3.5.2.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation

require antefix
export_exlib_phases src_unpack src_compile src_install

# SWT's "build.xml" is Eclipse-specific, and in fact both assumes and requires
# Eclipse be already installed. This is an obvious problem for source-based
# distributions, since the Eclipse exheres depends on the SWT exheres. (Ergo,
# the SWT exheres cannot itself depend on the Eclipse exheres.)
# 
# To circumvent this circular dependency, replace SWT's "build.xml" with a new
# "build.xml" just performing compilation and jaring.
enable_build_xml_creation

BUGS_TO="leycec@gmail.com"

SUMMARY="A GTK-based graphical widget toolkit for use with the Java platform."
DESCRIPTION="
SWT is a GTK-based graphical widget toolkit for use with the Java platform. It
was originally developed by IBM and is now maintained by the Eclipse Foundation
in tandem with the Eclipse IDE. It is an alternative to the AWT and Swing Java
GUI toolkits provided by Sun Microsystems as part of the J2SE Platform.
"

#FIXME: Define additional mirrors.
DOWNLOAD_ROOT="http://download.eclipse.org/eclipse/downloads/drops/R-${PV}-201002111343"
DOWNLOADS="
    platform:x86?   ( ${DOWNLOAD_ROOT}/${PNV}-gtk-linux-x86.zip )
    platform:amd64? ( ${DOWNLOAD_ROOT}/${PNV}-gtk-linux-x86_64.zip )
"
HOMEPAGE="http://www.eclipse.org"
UPSTREAM_DOCUMENTATION="http://www.eclipse.org/${PN}/docs.php [[ lang = en ]]"

SLOT="3.5"
LICENCES="|| ( CPL-1.0 LGPL-2.1 MPL-1.1 )"
MYOPTIONS+="
    cairo gnome opengl xulrunner
    platform:
        amd64
        x86
"

#FIXME: The soft "opengl" dependency should probably be "virtual/opengl"
#instead. Unfortunately, that doesn't exist yet. Also, is this the most
#concise way to depend on "gnome"?
DEPENDENCIES+="
    build:
        app-arch/unzip
        dev-util/pkg-config
        x11-proto/inputproto
        x11-proto/xextproto
    build+run:
        dev-libs/atk[>=1.10.2]
        dev-libs/glib[>=2.6]
        x11-libs/gtk+[>=2.6.8]
        x11-libs/libXrender
        x11-libs/libXt
        x11-libs/libXtst
        cairo? ( x11-libs/cairo[>=1.4.14] )
        gnome? (
            gnome-platform/libgnome:2
            gnome-platform/libgnomeui:2
            gnome-platform/gnome-vfs[>=2]
        )
        opengl? ( x11-dri/mesa )
        xulrunner? ( dev-libs/xulrunner[>=1.9] )
"

# The above archive extracts to the current directory. (Odd, but acceptable...)
WORK="${WORKBASE}"

DEFAULT_SRC_PREPARE_PATCHES=(
    "${FILES}/make_linux_mak-fix.patch"
    "${FILES}/build_sh-fix.patch"
)

ANT_SRC_COMPILE_PARAMS=( compile )
ANT_SRC_INSTALL_PARAMS=( jar )

# Other exheres requiring SWT require an OSGI "MANIFEST.MF" rather than the non-
# OSGI "MANIFEST.MF" that SWT bundles. The particular manifest below is copied
# from "${FILES}/MANIFEST.MF" during the "src_install" phase. (Below!)
ANT_SRC_INSTALL_MANIFEST_MF="${WORK}/MANIFEST.MF"
JAVA_SRC_INSTALL_JARS=( "dist/${PN}.jar" )

# Do not call the "default_src_unpack" function. Eclipse SWT bundles itself in
# an odd manner; we have to unpack it ourselves.
JAVA_IS_UNPACKING_MANUALLY=1

swt_src_unpack() {
    antefix_src_unpack

    # Absolute path to the root of the SWT's source tree.
    SWT_SRC_DIR="${WORK}/src"

    # Absolute path to the root of the SWT's build tree having class files.
    SWT_BUILD_DIR="${WORK}/build"

    # Extract the "src.zip" archive from the fetched compressed archive, then
    # extract the contents of that archive to ${WORK}. 
    echo ">>> Unpacking ${ARCHIVES} to ${PWD}"
    edo unzip -joq "${FETCHEDDIR}/${ARCHIVES}" "src.zip"
    unpack "./src.zip"   # note: the prefixing "./" is important!

    # Delete the resultant "about_files/" path and original "src.zip" archive.
    echo ">>> Cleaning extraneous files"
    edo rm -rf "about_files/" "src.zip"

    # "src.zip" unpacks the Java tree into "org/". The replacement
    # "files/build.xml", however, expects this tree to be found at
    # "src/org/" per the Ant standard. We ensure this now.
    echo ">>> Creating directory tree"
    edo mkdir -p "${SWT_SRC_DIR}" "${SWT_BUILD_DIR}"
    edo mv "${WORK}/org" "${SWT_SRC_DIR}"

    # Copy Java files from the source to build directory.
    echo ">>> Creating required files"
    edo mkdir -p "${SWT_BUILD_DIR}/org/eclipse/swt/internal/"
    edo cp "${SWT_SRC_DIR}/org/eclipse/swt/internal/SWTMessages.properties" \
           "${SWT_BUILD_DIR}/org/eclipse/swt/internal/"
    edo cp "${WORK}/version.txt" "${SWT_BUILD_DIR}/version.txt"

    echo ">>> Creating ${ANT_BUILD_XML}"
    edo rm "${ANT_BUILD_XML}"
    create_build_xml
}

# SWT comes as underlying C and C++ libraries and frontfacing Java JNI
# libraries accessing the C and C++ libraries. We build the former first.
swt_src_compile() {
    # Compile underlying C and C++ libraries. The "eclipse-build" framework
    # supplies a "build.sh" script, with which to automate this compilation. We
    # patch that script in "src_prepare" so as to interface with Exherbo-aware
    # exheres functions. This is preferable to redefining the contents of this
    # script in this function as a pure exheres function since that encourages
    # desynchronization of this script and this function when bumping versions.

    # Export environment variables to be inherited by "build.sh".
    export OS="Linux"

    if   option platform:amd64; then export MODEL="x86_64"
    elif option platform:x86;   then export MODEL="i386"
    fi

    # Relative name of this machine's "lib/" directory.
    export MULTILIB_DIR=$(get_libdir)

    if option cairo;     then export OPTION_CAIRO=1; fi
    if option gnome;     then export OPTION_GNOME=1; fi
    if option opengl;    then export OPTION_OPENGL=1; fi
    if option xulrunner; then export OPTION_XULRUNNER=1; fi

    # So say we all!
    echo ">>> Compiling C and C++ libraries"
    edo sh "${WORK}/build.sh"

    # Compile underlying Java libraries.
    antefix_src_compile
}

swt_src_install() {
    echo ">>> Installing C and C++ libraries"
    dolib.so "${WORK}"/*.so

    echo ">>> Preparing Java manifest"

    # Set "SWT_ARCH" according to the architecture being built against. The
    # values for this variable follow from the variable of same name in the
    # "build.sh" script.
    if   option platform:amd64; then SWT_ARCH="x86_64"
    elif option platform:x86;   then SWT_ARCH="x86"
    fi

    edo cp "${FILES}/MANIFEST.MF" "${ANT_SRC_INSTALL_MANIFEST_MF}"
    edo sed -i "${ANT_SRC_INSTALL_MANIFEST_MF}" \
        -e "s:__SWT_ARCH__:${SWT_ARCH}:" \
        -e "s:__PV__:${PV}:" \

    # Install underlying Java libraries.
    antefix_src_install
}

