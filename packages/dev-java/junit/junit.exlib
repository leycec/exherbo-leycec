# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'junit-4.6.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation

#FIXME: Integrate into "dev-java/apache-ant", which currently hardcodes a JUnit
#download. Rather ugly, but understandable.

# Do not require the "sourceforge" exlib, as this exheres overrides all
# default globals supplied by that exlib.
require antefix
export_exlib_phases src_unpack src_prepare src_install

BUGS_TO="leycec@gmail.com"
SUMMARY="Java unit testing framework"
DESCRIPTION="
JUnit is a Java unit testing framework. It significantly contributed to the
development of test-driven development, and is one of a family of unit testing
frameworks collectively known as xUnit that originated with SUnit.
"

MY_PNV=${PN}${PV}

HOMEPAGE="http://www.${PN}.org/"
UPSTREAM_RELEASE_NOTES="http://kentbeck.github.com/${PN}/doc/ReleaseNotes${PV}.html"
UPSTREAM_DOCUMENTATION="http://kentbeck.github.com/${PN}/javadoc/${PV} [[ lang = en ]]"
REMOTE_IDS="sourceforge:${PN}"

# Junit also supplies a much smaller "${PNV}-src.jar" archive. Unfortunately,
# since this archive lacks a genuine "build.xml" Ant makefile, it's fairly
# useless. We fallback to downloading the larger zipfile.
DOWNLOADS="mirror://sourceforge/${PN}/${MY_PNV}.zip"
WORK="${WORKBASE}"/${MY_PNV}

SLOT="0"
LICENCES="CPL-1.0"
MYOPTIONS="doc examples"
DEPENDENCIES="
    build+run: app-arch/unzip
    build+run: dev-java/hamcrest[>=1.2]
"

# Absolute path to the root of the JUnit source tree.
JUNIT_SRC_DIR="${WORK}"/src/main/java

# Absolute path to the root of the JUnit dist tree (i.e., output jarfile tree).
JUNIT_DIST_DIR="${WORK}"/dist

# Numerous patches correcting compatibility with Hamcrest 1.2 are thanks to the
# MacPorts "port" for JUnit 4.6 at "http://trac.macports.org/changeset/52233".
#
# You guys are legends!
DEFAULT_SRC_PREPARE_PATCHES=(
    "${FILES}"/build_xml-fix.patch
    "${FILES}"/org_junit_internal_matchers-deprecate.patch
)

ANT_SRC_PREPARE_SYMLINK_DIR=lib
ANT_SRC_PREPARE_SYMLINK_JARS=( hamcrest-core )

ANT_PARAMS=(
    -Ddist=${JUNIT_DIST_DIR}
    -Dhamcrestlib=${ANT_SRC_PREPARE_SYMLINK_DIR}/hamcrest-core.jar
)

ANT_SRC_COMPILE_PARAMS=( build )
ANT_SRC_INSTALL_PARAMS=( jars )
DEFAULT_SRC_INSTALL_EXTRA_DOCS=( README.html doc/ReleaseNotes${PV}.txt )

junit_src_unpack() {
    antefix_src_unpack

    # JUnit ships its source in an embedded jarfile. Odd, but very well.
    einfo "Unpacking ${PNV}-src.jar..."
    edo mkdir -p  ${JUNIT_SRC_DIR}
    edo unzip -qd ${JUNIT_SRC_DIR} "${WORK}"/${PNV}-src.jar
}

junit_src_prepare() {
    # Delete all jar files, including the above.
    antefix_src_prepare

    einfo "Removing Hamcrest..."
    edo rm -rf "${WORK}"/temp.hamcrest.source/

    # Do not use "edo rm -f "${WORK}"/**/*.class" as that tends to glob more
    # files than can be reasonably handled by the shell.
    einfo "Removing class files..."
    edo find "${WORK}" -type f -iname "*.class" -delete
}

junit_src_install() {
    antefix_src_install

    # JUnit creates various jar files, of which we ignore all except the
    # "${PN}-dep-${PV}.jar" jar file having no external dependencies.
    set_install_jar_dir /usr/share/${PN}
    install_jar_as ${JUNIT_DIST_DIR}/${PN}-dep-${PV}.jar ${PN}.jar

    # Restructure the JUnit documentation tree so as to place all HTML
    # documentation under a new "/usr/share/doc/${PN}/html/" path.
    if option doc; then
        JUNIT_DOCUMENT_DIR="${WORK}"/doc/
        JUNIT_JAVADOC_DIR="${WORK}"/javadoc/

        # First, remove all non-HTML documents.
        edo rm ${JUNIT_DOCUMENT_DIR}/*.{sh,txt}

        # Next, install all HTML documents.
        docinto html
        dodoc ${JUNIT_DOCUMENT_DIR}/*
        docinto html/javadoc
        dodoc ${JUNIT_JAVADOC_DIR}/*
    fi

    if option examples; then
        einfo "Installing examples..."
        docinto examples
        dodoc "${WORK}"/org/junit/samples/*
    fi
}

