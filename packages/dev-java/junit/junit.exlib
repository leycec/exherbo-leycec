# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'junit-4.6.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation
#
# --------------------( SYNOPSIS                           )--------------------
# Each JUnit slot requires a unique build process. This exlib abstracts out as
# much commonality as possible, with individual exheres implementing the detail.
#
# --------------------( TODO                               )--------------------
# * Integrate into "dev-java/apache-ant", which currently hardcodes a JUnit
#   download. Rather ugly, but understandable.

# ....................{ EXLIB                              }....................
# Do not require the "sourceforge" exlib, as this exheres overrides most
# default globals supplied by that exlib.
require antefix
export_exlib_phases src_unpack

# Relative path to the extracted jar file under "${WORK}" having source files
# for this exheres.
#
# This is not optional, since most JUnit slots embed a different jar file.
myexparam archive_jar_file=
JUNIT_ARCHIVE_JAR_FILE=$(exparam archive_jar_file)

# ....................{ EXHERES                            }....................
BUGS_TO="leycec@gmail.com"

SUMMARY="Java unit testing framework"
DESCRIPTION="
JUnit is a Java unit testing framework. It significantly contributed to the
development of test-driven development, and is one of a family of unit testing
frameworks collectively known as xUnit that originated with SUnit.
"

HOMEPAGE="http://www.${PN}.org"
UPSTREAM_RELEASE_NOTES="http://kentbeck.github.com/${PN}/doc/ReleaseNotes${PV}.html"
UPSTREAM_DOCUMENTATION="http://kentbeck.github.com/${PN}/javadoc/${PV} [[ lang = en ]]"
REMOTE_IDS="sourceforge:${PN}"

# Junit also supplies a much smaller "${PNV}-src.jar" archive. Unfortunately,
# since this archive lacks a genuine "build.xml" Ant makefile, it's fairly
# useless. We fallback to downloading the larger zipfile.
MY_PNV="${PN}${PV}"
DOWNLOADS="mirror://sourceforge/${PN}/${MY_PNV}.zip"
WORK="${WORKBASE}/${MY_PNV}"

LICENCES="CPL-1.0"
DEPENDENCIES+="
    build:
        app-arch/unzip
"

# JUnit ships its source in an embedded jar file. Avoid cleaning jar files.
JAVA_IS_CLEANING_JAR_FILES=

# Absolute path to the root of the JUnit source tree.
JUNIT_SRC_DIR="${WORK}/src/main/java"

# Absolute path to the root of the JUnit dist tree (i.e., output jarfile tree).
JUNIT_DIST_DIR="${WORK}/dist"

junit_src_unpack() {
    antefix_src_unpack

    echo ">>> Unpacking source jar file"
    edo mkdir -p  "${JUNIT_SRC_DIR}"
    edo unzip -qd "${JUNIT_SRC_DIR}" "${WORK}/${JUNIT_ARCHIVE_JAR_FILE}"

    # Delete all jar files, including the above.
    echo ">>> Removing jar files"
    javafix_clean_jar_files

    echo ">>> Removing extraneous source files"
    local EXTRA_SOURCE_FILES
    for   EXTRA_SOURCE_FILES in "${WORK}/temp.hamcrest.source/"; do
        [[ -d "${EXTRA_SOURCE_FILES}" ]] && edo rm -rf "${EXTRA_SOURCE_FILES}"
    done
}

