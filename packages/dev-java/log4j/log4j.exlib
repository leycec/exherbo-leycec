# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2

# Log4j does not use an Apache-compliant URL scheme. It just mostly complies.
require antefix apache [ \
    pn="logging"        homepage_subdir="${PN}" \
    pnv="apache-${PNV}" download_subdir="${PN}/${PV}" ]

BUGS_TO="leycec@gmail.com"

SUMMARY="Java logging facility"
DESCRIPTION="
Log4j is a Java logging facility. It supports selectively runtime-enabled
logging without modification of underlying code, designed so as to persist
logging statements in shipped code without incurring a heavy performance
penalty. Logging behavior can be controlled by editing a configuration file
without touching the application binary.
"

UPSTREAM_DOCUMENTATION="${HOMEPAGE}/${PV}/apidocs [[ lang = en ]]"
UPSTREAM_CHANGELOG="${HOMEPAGE}/${PV}/changes-report.html"

# Log4j supports the following optional dependencies. Sadly, we don't.
#DEPENDENCIES+="
#    javamail? ( dev-java/javamail )
#    jmx?      ( dev-java/jmx )
#    jms?      ( dev-java/jms )
#"

JAVA_SRC_INSTALL_JARS=( "dist/lib/${PNV}.jar" )

# Log4j's "build.xml" often hardcodes erroneous version values (e.g., the
# "build.xml" file corresponding to "log4j-1.2.16.exheres-0" insisted it was
# "1.2.15"), which causes jar tasks to generate improperly named jar files.
# Forcefully notify log4j of its actual version.
ANT_PARAMS=( -Dversion="${PV}" )
ANT_SRC_CONFIGURE_PARAMS=( init )

# The "build" task in log4j's "build.xml" is clever enough to only compile those
# Ant targets for which the local system has installed the requisite
# dependencies. In practice, this usually means merely these tasks:
#
# * "build.core", which we always want to build.
# * "build.examples", which we don't usually want to build, but which won't be
#   added to the output jar file and thus doesn't matter...
# * "build.xml", which we always want to build and which depends on JAXP, which
#   is present in all newer JDKs.
ANT_SRC_COMPILE_PARAMS=( build )

# Yes, log4j's "build.xml" has an Ant task named "${PN}.jar". As its name
# suggests, it generates a jar file having log4j class files. The more generally
# named "jar" task generates both this and a jar file having source files. Dull!
ANT_SRC_INSTALL_PARAMS=( "log4j.jar" )

