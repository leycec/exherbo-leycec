# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2

# Maven bootstraps itself via an Ant "build.xml" file. (Oh, the irony.)
require antefix apache [ work="${PNV}" ]
export_exlib_phases pkg_setup src_prepare src_install

# Maven's "build.xml" calls Ant tasks provided by the "artifact" namespace
# (namely, "artifact:pom") dynamically defined by the "maven-artifact-ant.jar"
# file bundled with its source tarball. We cannot indiscriminantly delete jar
# files, therefore.
disable_jar_file_cleaning

BUGS_TO="leycec@gmail.com"

SUMMARY="Java project management and build automation tool"
DESCRIPTION="
Maven is a software tool for managing Java projects and automating Java project
builds. It is similar in functionality to the Apache Ant tool, but based on
different concepts: namely a construct known as the Project Object Model (POM),
describing the software project being built, its dependencies on other external
modules and components, and the build order. It comes with pre-defined targets
for performing certain well defined tasks such as compilation of code and its
packaging. Additionally, it dynamically downloads Java libraries and Maven
plugins from remote repositories, provides built-in support for retrieving files
from the Maven 2 Central Repository and other Maven repositories, and can upload
artifacts to specific repositories after a successful build.
"

UPSTREAM_DOCUMENTATION="${HOMEPAGE}/ref/${PV} [[ lang = en ]]"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}/docs/${PV}/release-notes.html"

SLOT="0"

# Maven has transitive dependencies on an extreme number of other Java exheres.
# In some cases, these dependencies introduce circular dependencies (e.g., Maven
# depends on the "httpcomponents-client" exheres which itself depends on
# Maven). For the moment, we're not particularly interested in a perfectly
# source-based Maven build; we just want it working.
#
# See "${WORK}/DEPENDENCIES" for details.
DEPENDENCIES+=""

# Maven's "build.xml" performs automated integration testing. Naturally, this
# breaks sydbox's path sandboxing. Patch it away, McCoy.
DEFAULT_SRC_PREPARE_PATCHES=( "${FILES}/build_xml-fix.patch" )

DEFAULT_SRC_INSTALL_EXTRA_SUBDIRS="${PN}"
DEFAULT_SRC_INSTALL_EXTRA_DOCS=( "DEPENDENCIES" )

MAVEN_DIST_DIR="${WORK}/dist"

# Absolute path to the system-wide directory to which Maven will be installed.
MAVEN_HOME=$(which_installed_jar_dir_nonfatal "maven")

# Maven's "build.xml" requires it be installed to a subdirectory named ${PNV}.
# Accomodate its wish during the Ant build process; then, during installation,
# move this subdirectory to a proper versionless directory at ${MAVEN_HOME}.
#
# Note: the "maven-compile" task recursively deletes "${WORK}/target/". As such,
# neither this nor any directory below may be placed in this directory. Danger!
MAVEN_HOME_WORK="${MAVEN_DIST_DIR}/${PNV}"

# Absolute path to the integration repository of Maven dependencies that Maven
# requires for building.
MAVEN_REPO_WORK="${MAVEN_DIST_DIR}/repository"

# Absolute path to the integration repository of Maven dependencies to be copied
# into the above path if and only if ${MAVEN_IS_OFFLINE} is "true". This is only
# intended for developer testing, at the moment.
MAVEN_REPO_SOURCE="/tmp/maven/${PNV}/repository"

# If non-zero, enables offline mode (i.e., prevent download of Maven
# dependencies); otherwise, performs dependency downloading.
#
# Defaults to zero, at the moment. This will be flipped to non-zero... sometime.
#MAVEN_IS_OFFLINE=1
MAVEN_IS_OFFLINE=

# Enabling the "skip.pull" property turns the "pull" task into a no-op and, with
# the patch above applied, prevents the "read-poms" task from downloading. In
# short, this forces Maven to operate in offline mode.
ANT_PARAMS=(
    -Dmaven.home="${MAVEN_HOME_WORK}"
    -Dmaven.repo.local="${MAVEN_REPO_WORK}"
)

#FIXME leycec: only for testing, at the moment.
if [[ -n "${MAVEN_IS_OFFLINE}" ]]; then
    ANT_PARAMS+=(
        "-Dskip.pull=true"
        "-Dmaven.repo.local.poms=${WORK}/target/repository.poms"
    )
fi

# Maven's "build.xml" demands that it be invoked once and only once. It
# fails badly when invoked separately across multiple exlib phases, perhaps
# owing to poor caching in dependency checking. This calls these Ant tasks:
#
# * "pull", downloading remote Maven dependencies. This is a no-op when
#   ${MAVEN_IS_OFFLINE} is set.
# * "compile-boot", bootstrapping a new Maven binary distribution.
# * "maven-compile", running the bootstrapped binaries to complete compilation.
ANT_SRC_COMPILE_PARAMS=( maven-compile )

# The Maven "assembly" is a compressed archive aggregating the set of all
# compiled binaries for Maven. This task extracts that archive into
# "${MAVEN_HOME}/bin" and thus completes installation.
ANT_SRC_INSTALL_PARAMS=( extract-assembly )

apache-maven_pkg_setup() {
    javafix_pkg_setup

    ewarn "This exheres is a proof-of-concept build bootstrapping the Maven build tool."
    ewarn "This exheres is incomplete and far from an ideal build. It currently requires"
    ewarn "temporary disabling of network sandboxing, for example, to facilitate Maven's"
    ewarn "installation of an integration repository. The download process currently"
    ewarn "consumes 33MB of bandwidth and additional local space. Replacing such downloads"
    ewarn "with source-based exheres is a non-trivial task, given the number of downloads"
    ewarn "as well as Maven's obsession with remote resolution of project dependencies. In"
    ewarn "other words, don't expect a proper fix anytime soon."
    ewarn
    ewarn "You have been warned."
    JAVA_IS_DISABLING_NETWORK_SANDBOXING=1
}

apache-maven_src_prepare() {
    antefix_src_prepare

    echo ">>> Preparing directory tree"
    edo mkdir -p "${MAVEN_DIST_DIR}"

    #FIXME leycec: only for testing, at the moment.
    if [[ -n "${MAVEN_IS_OFFLINE}" ]]; then
        echo ">>> Copying offline repository"
        edo cp -R "${MAVEN_REPO_SOURCE}" "${MAVEN_REPO_WORK%/*}"
    fi
}

apache-maven_src_install() {
    antefix_src_install

    echo ">>> Removing extraneous files"
    edo rm "${MAVEN_HOME_WORK}"/*.txt
    edo rm "${MAVEN_HOME_WORK}"/bin/*.bat

    # Move the locally installed Maven into a system-wide directory. Happily,
    # Maven defines sufficiently distro-agnostic executable scripts; install!
    echo ">>> Installing shared files"
    dodir  "${MAVEN_HOME%/*}"      "/usr/bin/"
    edo mv "${MAVEN_HOME_WORK}" "${IMAGE}/${MAVEN_HOME}"
    dosym  "${MAVEN_HOME}/bin/mvn" "/usr/bin/mvn"

    # Make the ${MAVEN_HOME} exheres global a system-wide environment variable
    # for subsequent access by other exlibs, exheres, and users.
    echo ">>> Installing environment files"
    hereenvd 50maven <<EOF
M2_HOME=${MAVEN_HOME}
EOF
}

#FIXME leycec: Debian-specific discussion I grepped online, discussing their
#attempt to deploy an offline Maven bootstrap build. The answer is, of course,
#that it is doable but not terribly easy:
#
# > * Create a local repository for Maven, e.g.
# > debian/.m2/repository. For each build-dependency create the
# > appropriate directory structure (e.g.
# > debian/.m2/repository/plexus/plexus-utils/1.0.2/).
# 
# I would actually suggest to start building a debian build server
# internal maven repository.
# 
# http://maven.apache.org/guides/introduction/introduction-to-repositories.html
# 
# Together with a proxy (e.g. proximity .. also documented in the books)
# it can be ensured that a build is basically done without going out to
# the internet for any artifacts and it is guaranteed that only allowed
# internal artifacts are use.
# 
# The repository should only contain packages that are in debian. Maven
# could actually deploy artifacts to the repo as part of the build
# process.
# 
# For other builds it would be good if the packages can deploy to the
# repo as well. Than any maven build can just declare the right debian
# dependency.
# 
# > * Copy (or symlink) the build-depends jars from /usr/share/java
# > to our repository. This should ensure that maven does not try to
# > download any dependencies. (I imagine maven also has an option to
# > inhibit downloads; it would be safest to set this, and/or set
# > http_proxy).
# 
# Use of proxies is a bit documented here
# http://maven.apache.org/guides/mini/guide-proxies.html
# 
# To run maven in offline mode there is a -o flag.
# 
# > * Set "localRepository" to "debian/.m2/repository", and call
# > maven's bootstrap shell script. (this process is described in
# > http://maven.apache.org/guides/development/guide-building-m2.html)
# 
# It might be a good idea to create a "company" pom for Debian that
# contains all settings and so on that apply to all Debian packages
# that are build with Maven. Otherwise a debian profile in a
# settings.xml could achieve similar things. 

