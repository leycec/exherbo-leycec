# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'javacc-5.0.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation

# ....................{ EXHERES                            }....................
require antefix
export_exlib_phases src_prepare src_install

# Numeric identifier uniquely identifying this Javacc version for download from
# "http://java.net". For example, "javacc-5.0" downloads from:
#
#     https://javacc.dev.java.net/files/documents/17/142527/javacc-5.0src.tar.gz
#
# The "17" is not important. (It refers to Javacc itself, presumably). The
# "142527" is important. (It refers to version 5.0 of Javacc.) So,
# "javacc-5.0.exheres-0" requires this exlib like so:
#
#     require javacc [ download_id=142527 ]
myexparam download_id=

# ....................{ SETTINGS                           }....................
BUGS_TO="leycec@gmail.com"

SUMMARY="JavaCC generates Java source for parsing formal grammars"
DESCRIPTION="
JavaCC, the Java Compiler Compiler, is an open-source parser generator for the
Java programming language. It's similar to Yacc in that it generates a parser
for a formal grammar provided in EBNF notation, except the output is Java source
code. Unlike Yacc, however, JavaCC generates top-down parsers. This limits it to
the LL(k) class of grammars and, in particular, prevents use of left recursion.
"

HOMEPAGE="https://${PN}.dev.java.net"
DOWNLOADS="${HOMEPAGE}/files/documents/17/$(exparam download_id)/${PNV}src.tar.gz"
UPSTREAM_DOCUMENTATION="${HOMEPAGE}/doc/docindex.html [[ lang = en ]]"

SLOT="0"
LICENCES="BSD-3"
DEPENDENCIES+="
    build+run+test:
        dev-java/junit:4
"

WORK="${WORKBASE}/${PN}"

# JavaCC actually bundles a compiled version of itself as a jar file so as to
# bootstrap compile a new JavaCC parser given this bundle. This is odd, but
# there's not much we can do.
JAVA_CLEAN_JAR_FILES_PARAMS=( -not -name 'javacc.jar' )
JAVA_SRC_PREPARE_SYMLINK_DIR="lib/junit"
JAVA_SRC_PREPARE_SYMLINK_JARS=( "junit:4" )
JAVA_SRC_INSTALL_JARS=( "bin/lib/${PN}.jar" )

# Note that, though the "compile" task compiles "*Test.java" files the "jar"
# task does not actually jar them. (Good enough for us.)
#
# Note also that this task complains several times about "Token.java" being a
# deprecated file. Do not remove these files, however! Compilation dies under
# non-deprecated versions of this file. Hurk, spu-urk.
ANT_SRC_COMPILE_PARAMS=( compile )
ANT_SRC_INSTALL_PARAMS=( jar )

# ....................{ PHASES                             }....................
javacc_src_prepare() {
    antefix_src_prepare

    # JavaCC's several "build.xml" files actually hardcode a JUnit version
    # dependency. Cull, but note this is probably unsurprising giving the
    # project's... dormancy.
    echo ">>> Patching build.xml files"
    for BROKEN_BUILD_XML in \
        "${ANT_BUILD_XML}" "src/org/javacc/parser/build.xml"; do
        edo sed -e 's~lib/junit[0-9.]*/~lib/junit/~' -i "${BROKEN_BUILD_XML}"
    done
}

javacc_src_install() {
    antefix_src_install

    # Set absolute paths in a reasonably generic way. (See below.)
    local JAVACC_JAR_FILE=$(which_installed_jar_file_nonfatal "javacc")
    local JAVACC_BIN_DIR=$( which_installed_jar_dir_nonfatal  "javacc")/"bin"

    # JavaCC provides several convenience shell scripts for running various
    # Java class files in its installed jar file as command-line executables.
    # Change the path to that jar file in these scripts to the Exherbo-specific
    # absolute path...to that jar file!
    #
    # Don't do this in "javacc_src_prepare" as "javacc.jar" will not have been
    # installed at that point.
    echo ">>> Installing shell scripts"
    local JAVACC_SHELL_SCRIPT
    for   JAVACC_SHELL_SCRIPT in \
        "bin/javacc" "bin/jjdoc" "bin/jjrun" "bin/jjtree"; do
        edo sed -e "s~^JAR=.*$~JAR=\"${JAVACC_JAR_FILE}\"~" \
            -i "${JAVACC_SHELL_SCRIPT}"
        dobin  "${JAVACC_SHELL_SCRIPT}"
    done

    # Exherbo prefers an installation tree resembling:
    #
    #     /usr/share/javacc/javacc.jar
    #     /usr/bin/javacc
    #     /usr/bin/jjdoc
    #     /usr/bin/jjrun
    #     /usr/bin/jjtree
    #
    # However, JavaCC and other exheres requiring JavaCC expect an installation
    # tree resembling:
    #
    #     /usr/share/javacc/bin/lib/javacc.jar
    #     /usr/share/javacc/bin/javacc
    #     /usr/share/javacc/bin/jjdoc
    #     /usr/share/javacc/bin/jjrun
    #     /usr/share/javacc/bin/jjtree
    #
    # Provide both by symlinking the former to the latter.
    echo ">>> Installing canonical symlinks"
    dodir                      "${JAVACC_BIN_DIR}/lib/"
    dosym "${JAVACC_JAR_FILE}" "${JAVACC_BIN_DIR}/lib/"
    for JAVACC_SHELL_SCRIPT in "javacc" "jjdoc" "jjrun" "jjtree"; do
        dosym "/usr/bin/${JAVACC_SHELL_SCRIPT}" "${JAVACC_BIN_DIR}/"
    done
}

